/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI68979 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67046 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI54003 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI67270 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52425 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52517 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52513 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55248 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI55244 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52485 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52488 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52490 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI81816 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI81440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81439 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81524 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81532 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81472 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI81479 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI54007 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI54010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI54009 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI67180 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67179 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI54005 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI54021 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI54019 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI67168 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52481 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI65424 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI60268 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13609 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52522 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI52468 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52472 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52415 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52518 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52439 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52204 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52474 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52417 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52550 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52547 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52544 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52541 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52534 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52443 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52530 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52528 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52441 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI52721 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52718 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52715 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52712 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52202 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI52205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52459 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI52457 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI52634 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI52632 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52648 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52645 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52642 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52639 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52672 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI52686 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52683 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52680 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52677 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52447 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI52449 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52619 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52616 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52613 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52610 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI52445 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI52423 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI45006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI52594 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52591 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52588 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI52585 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52667 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52461 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52705 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI52445 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI52445, name: "stConstituent", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI52445, name: "stInvalid", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI52445, name: "stTermMacro", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI52445, name: "stNonTermMacro", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI52445, name: "stMultipleEscape", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI52445, name: "stSingleEscape", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI52445, name: "stWhitespace", len: 0, sons: null}}};
NTI52445.node = NNI52445;
var NNI52594 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI52423, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52445, name: "Field2", sons: null}]};
NTI52594.node = NNI52594;
NTI52591.base = NTI52594;
var NNI52588 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52591, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52588.node = NNI52588;
NTI52585.base = NTI52588;
var NNI52447 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI52447, name: "ctAlphabetic", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI52447, name: "ctDigit", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI52447, name: "ctPackageMarker", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI52447, name: "ctPlusSign", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI52447, name: "ctMinusSign", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI52447, name: "ctDot", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI52447, name: "ctDecimalPoint", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI52447, name: "ctRatioMarker", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI52447, name: "ctExponentMarker", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI52447, name: "ctInvalid", len: 0, sons: null}}};
NTI52447.node = NNI52447;
NTI52449.base = NTI52447;
var NNI52619 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI52423, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52449, name: "Field2", sons: null}]};
NTI52619.node = NNI52619;
NTI52616.base = NTI52619;
var NNI52613 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52616, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52613.node = NNI52613;
NTI52610.base = NTI52613;
var NNI52686 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI52423, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52672, name: "Field2", sons: null}]};
NTI52686.node = NNI52686;
NTI52683.base = NTI52686;
var NNI52680 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52683, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52680.node = NNI52680;
NTI52677.base = NTI52680;
NTI52632.base = NTI52423;
var NNI52648 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI52632, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52634, name: "Field2", sons: null}]};
NTI52648.node = NNI52648;
NTI52645.base = NTI52648;
var NNI52642 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52645, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52642.node = NNI52642;
NTI52639.base = NTI52642;
var NNI52457 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI52457, name: "rcUpcase", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI52457, name: "rcDowncase", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI52457, name: "rcPreserve", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI52457, name: "rcInvert", len: 0, sons: null}}};
NTI52457.node = NNI52457;
var NNI52459 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI52459, name: "nlLF", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI52459, name: "nlCR", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI52459, name: "nlCRLF", len: 0, sons: null}}};
NTI52459.node = NNI52459;
var NNI52667 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "syntaxType", len: 0, typ: NTI52585, name: "syntaxType", sons: null}, 
{kind: 1, offset: "constituentTrait", len: 0, typ: NTI52610, name: "constituentTrait", sons: null}, 
{kind: 1, offset: "singleMacro", len: 0, typ: NTI52677, name: "singleMacro", sons: null}, 
{kind: 1, offset: "dispatchMacro", len: 0, typ: NTI52639, name: "dispatchMacro", sons: null}, 
{kind: 1, offset: "rcase", len: 0, typ: NTI52457, name: "rcase", sons: null}, 
{kind: 1, offset: "newlineType", len: 0, typ: NTI52459, name: "newlineType", sons: null}]};
NTI52667.node = NNI52667;
var NNI52205 = {kind: 1, offset: "id", len: 0, typ: NTI52202, name: "id", sons: null};
NTI52205.node = NNI52205;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI52205.base = NTI3408;
NTI52667.base = NTI52205;
NTI52461.base = NTI52667;
NTI52530.base = NTI138;
NTI52204.base = NTI52205;
var NNI52472 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52472.node = NNI52472;
var NNI52468 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "car", len: 0, typ: NTI52204, name: "car", sons: null}, 
{kind: 1, offset: "cdr", len: 0, typ: NTI52204, name: "cdr", sons: null}]};
NTI52468.node = NNI52468;
NTI52468.base = NTI52205;
NTI52472.base = NTI52468;
NTI52415.base = NTI52472;
var NNI52518 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "lambdaList", len: 0, typ: NTI52415, name: "lambdaList", sons: null}, 
{kind: 1, offset: "nativeP", len: 0, typ: NTI130, name: "nativeP", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI52204, name: "body", sons: null}, 
{kind: 1, offset: "nativeBody", len: 0, typ: NTI52522, name: "nativeBody", sons: null}]};
NTI52518.node = NNI52518;
NTI52518.base = NTI52205;
NTI52439.base = NTI52518;
var NNI52474 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI52204, name: "value", sons: null}, 
{kind: 1, offset: "function", len: 0, typ: NTI52439, name: "function", sons: null}, 
{kind: 1, offset: "package", len: 0, typ: NTI52441, name: "package", sons: null}, 
{kind: 1, offset: "plist", len: 0, typ: NTI52415, name: "plist", sons: null}]};
NTI52474.node = NNI52474;
NTI52474.base = NTI52205;
NTI52417.base = NTI52474;
var NNI52550 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI52202, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52417, name: "Field2", sons: null}]};
NTI52550.node = NNI52550;
NTI52547.base = NTI52550;
var NNI52544 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52547, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52544.node = NNI52544;
NTI52541.base = NTI52544;
var NNI52534 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI52443, name: "parent", sons: null}, 
{kind: 1, offset: "binding", len: 0, typ: NTI52541, name: "binding", sons: null}]};
NTI52534.node = NNI52534;
NTI52534.base = NTI52205;
NTI52443.base = NTI52534;
var NNI52528 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "nicknames", len: 0, typ: NTI52530, name: "nicknames", sons: null}, 
{kind: 1, offset: "environment", len: 0, typ: NTI52443, name: "environment", sons: null}]};
NTI52528.node = NNI52528;
NTI52528.base = NTI52205;
NTI52441.base = NTI52528;
var NNI52721 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI52441, name: "Field2", sons: null}]};
NTI52721.node = NNI52721;
NTI52718.base = NTI52721;
var NNI52715 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI52718, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI52715.node = NNI52715;
NTI52712.base = NTI52715;
var NNI52705 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "readtable", len: 0, typ: NTI52461, name: "readtable", sons: null}, 
{kind: 1, offset: "packageTable", len: 0, typ: NTI52712, name: "packageTable", sons: null}, 
{kind: 1, offset: "currentPackage", len: 0, typ: NTI52441, name: "currentPackage", sons: null}]};
NTI52705.node = NNI52705;
NTI52705.base = NTI3408;
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
NTI3424.base = NTI3408;
NTI3446.base = NTI3424;
var NNI13609 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13609.node = NNI13609;
var NNI3458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3458.node = NNI3458;
NTI3458.base = NTI3424;
NTI60268.base = NTI138;
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
var NNI65424 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI52417, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}]};
NTI65424.node = NNI65424;
var NNI52481 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52481.node = NNI52481;
NTI52481.base = NTI52472;
var NNI54019 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI54019, name: "sdtInput", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI54019, name: "sdtOutput", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI54019, name: "stdInputOutput", len: 0, sons: null}}};
NTI54019.node = NNI54019;
var NNI54021 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI54021, name: "setCharacter", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI54021, name: "setBinary", len: 0, sons: null}}};
NTI54021.node = NNI54021;
NTI67180.base = NTI52423;
NTI67179.base = NTI67180;
var NNI54010 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "aidx", len: 0, typ: NTI54007, name: "aidx", sons: null}, 
{kind: 1, offset: "bidx", len: 0, typ: NTI54005, name: "bidx", sons: null}]};
NTI54010.node = NNI54010;
NTI54009.base = NTI54010;
var NNI67168 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "direction", len: 0, typ: NTI54019, name: "direction", sons: null}, 
{kind: 1, offset: "elementType", len: 0, typ: NTI54021, name: "elementType", sons: null}, 
{kind: 1, offset: "bufferSize", len: 0, typ: NTI54005, name: "bufferSize", sons: null}, 
{kind: 1, offset: "buffer", len: 0, typ: NTI67179, name: "buffer", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI54009, name: "head", sons: null}, 
{kind: 1, offset: "tail", len: 0, typ: NTI54009, name: "tail", sons: null}, 
{kind: 1, offset: "unreadable", len: 0, typ: NTI130, name: "unreadable", sons: null}]};
NTI67168.node = NNI67168;
NTI67168.base = NTI52205;
NTI81472.base = NTI52423;
NTI81479.base = NTI81472;
NTI81532.base = NTI52423;
NTI81524.base = NTI52423;
NTI81440.base = NTI52423;
NTI81439.base = NTI81440;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
NTI81816.base = NTI52423;
var NNI52490 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI52490.node = NNI52490;
var NNI52488 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52488.node = NNI52488;
NTI52488.base = NTI52205;
NTI52490.base = NTI52488;
var NNI52485 = {kind: 1, offset: "codepoint", len: 0, typ: NTI52423, name: "codepoint", sons: null};
NTI52485.node = NNI52485;
NTI52485.base = NTI52205;
NTI55248.base = NTI52204;
var NNI55244 = {kind: 1, offset: "content", len: 0, typ: NTI55248, name: "content", sons: null};
NTI55244.node = NNI55244;
NTI55244.base = NTI52205;
NTI52425.base = NTI52485;
NTI52517.base = NTI52425;
var NNI52513 = {kind: 1, offset: "content", len: 0, typ: NTI52517, name: "content", sons: null};
NTI52513.node = NNI52513;
NTI52513.base = NTI52205;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3448.base = NTI3424;
var NNI3450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3450.node = NNI3450;
NTI3450.base = NTI3448;
var NNI67270 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI52423, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI54003, name: "Field1", sons: null}]};
NTI67270.node = NNI67270;
NTI67046.base = NTI52423;
NTI68979.base = NTI52425;
var NNI3462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3462.node = NNI3462;
NTI3462.base = NTI3424;

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20264, value_20265, typ_20266) {
		      var result = new Array(len_20264);
      for (var i = 0; i < len_20264; ++i) result[i] = nimCopy(null, value_20265, typ_20266);
      return result;
    

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		e_14006.trace = nimCopy(null, rawWriteStackTrace_13828(), NTI138);
		throw e_14006;

	
}

function chckRange(i_20409, a_20410, b_20411) {
			var Tmp1;

	var result_20412 = 0;

	BeforeRet: do {
			if (!(a_20410 <= i_20409)) Tmp1 = false; else {				Tmp1 = (i_20409 <= b_20411);			}		if (Tmp1) {
		result_20412 = i_20409;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20412;

}

function addInt(a_17403, b_17404) {
		      var result = a_17403 + b_17404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20403, a_20404, b_20405) {
			var Tmp1;

	var result_20406 = 0;

	BeforeRet: do {
			if (!(a_20404 <= i_20403)) Tmp1 = false; else {				Tmp1 = (i_20403 <= b_20405);			}		if (Tmp1) {
		result_20406 = i_20403;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20406;

}

function subInt(a_17603, b_17604) {
		      var result = a_17603 - b_17604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_17803, b_17804) {
		      var result = a_17803 * b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function isObj(obj_20468, subclass_20469) {
	var result_20470 = false;

	BeforeRet: do {
		var x_20471 = obj_20468;
		if ((x_20471 == subclass_20469)) {
		result_20470 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_20471 == subclass_20469))) break L2;
					if ((x_20471 == null)) {
					result_20470 = false;
					break BeforeRet;
					}
					
					x_20471 = x_20471.base;
				}
		} while(false);
		result_20470 = true;
		break BeforeRet;
	} while (false);

	return result_20470;

}

function modInt(a_18203, b_18204) {
		      if (b_18204 == 0) raiseDivByZero();
      if (b_18204 == -1 && a_18203 == 2147483647) raiseOverflow();
      return Math.floor(a_18203 % b_18204);
    

	
}

function mnewString(len_15203) {
		      var result = new Array(len_15203+1);
      result[0] = 0;
      result[len_15203] = 0;
      return result;
    

	
}

function nimCharToStr(x_13251) {
	var result_13252 = null;

		result_13252 = nimCopy(null, mnewString(1), NTI138);
		result_13252[0] = x_13251;

	return result_13252;

}

function addChar(x_20506, c_20507) {
		    x_20506[x_20506.length-1] = c_20507; x_20506.push(0);
  

	
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function reprAny(p_21141, p_21141_Idx, typ_21142) {
	var result_21143 = [null];

	var F={procname:"system.reprAny",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 273;
		var cl_21144 = [{recDepth: 0, indent: 0}];
		F.line = 274;
		initReprClosure_20953(cl_21144[0]);
		F.line = 275;
		result_21143[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		F.line = 276;
		reprAux_20957(result_21143, 0, p_21141, p_21141_Idx, typ_21142, cl_21144[0]);
		F.line = 277;
		if (result_21143[0] != null) { result_21143[0] = (result_21143[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_21143[0] = makeNimstrLit("\x0A");};
	framePtr = F.prev;

	return result_21143[0];

}
		var nl_whitespace_67005 = nimCopy(null, [32, 9, 13, 10], NTI67046);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function reraiseException() {
		if ((lastJSError == null)) {
		var e_14420 = null;
		e_14420 = {m_type: NTI3462, parent: null, name: null, message: null, trace: null, up: null};
		e_14420.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_14420.parent = null;
		raiseException(e_14420, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (isNimException_13253()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var objectID_45232 = [0];
var lispObjectCount_52401 = [0];
var nutslisp_logo_81001 = makeNimstrLit(" \xE2\xA3\x80\xE2\xA1\x80 \xE2\xA1\x80\xE2\xA2\x80 \xE2\xA3\xB0\xE2\xA1\x80 \xE2\xA2\x80\xE2\xA3\x80   \xE2\xA1\x87 \xE2\xA0\x84 \xE2\xA2\x80\xE2\xA3\x80 \xE2\xA3\x80\xE2\xA1\x80\x0A \xE2\xA0\x87\xE2\xA0\xB8 \xE2\xA0\xA3\xE2\xA0\xBC \xE2\xA0\x98\xE2\xA0\xA4 \xE2\xA0\xAD\xE2\xA0\x95   \xE2\xA0\xA3 \xE2\xA0\x87 \xE2\xA0\xAD\xE2\xA0\x95 \xE2\xA1\xA7\xE2\xA0\x9C\x0A");

function isPowerOfTwo_32627(x_32629) {
		var Tmp1;

	var result_32630 = false;

	BeforeRet: do {
		if (!(0 < x_32629)) Tmp1 = false; else {			Tmp1 = ((x_32629 & (x_32629 - 1)) == 0);		}		result_32630 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_32630;

}

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function auxWriteStackTrace_13604(f_13606) {
					var Tmp3;

	var result_13607 = [null];

		var it_13615 = f_13606;
		var i_13616 = 0;
		var total_13617 = 0;
		var tempFrames_13621 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13609);
		L1: do {
				L2: while (true) {
					if (!!((it_13615 == null))) Tmp3 = false; else {						Tmp3 = (i_13616 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_13621[i_13616].Field0 = it_13615.procname;
					tempFrames_13621[i_13616].Field1 = it_13615.line;
					i_13616 += 1;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_13615 == null))) break L5;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		result_13607[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_13617 == i_13616))) {
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13607[0] = makeNimstrLit("(");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr(((total_13617 - i_13616))+"")); } else { result_13607[0] = cstrToNimstr(((total_13617 - i_13616))+"");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13607[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_13815 = 0;
			var colontmp__13821 = 0;
			colontmp__13821 = (i_13616 - 1);
			var res_13824 = colontmp__13821;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_13824)) break L8;
						j_13815 = res_13824;
						add_11629(result_13607, 0, tempFrames_13621[j_13815].Field0);
						if ((0 < tempFrames_13621[j_13815].Field1)) {
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13607[0] = makeNimstrLit(", line: ");};
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13621[j_13815].Field1)+"")); } else { result_13607[0] = cstrToNimstr((tempFrames_13621[j_13815].Field1)+"");};
						}
						
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13607[0] = makeNimstrLit("\x0A");};
						res_13824 -= 1;
					}
			} while(false);
		} while(false);

	return result_13607[0];

}

function rawWriteStackTrace_13828() {
	var result_13830 = null;

		if (!((framePtr == null))) {
		result_13830 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13604(framePtr)), NTI138);
		}
		else {
			result_13830 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_13830;

}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(rawWriteStackTrace_13828()); } else { buf_13854[0] = rawWriteStackTrace_13828();};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function sysFatal_22421(message_22427) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2721;
		var e_22429 = null;
		F.line = 2722;
		e_22429 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2723;
		e_22429.message = nimCopy(null, message_22427, NTI138);
		F.line = 2724;
		raiseException(e_22429, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_22416(msg_22418) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		sysFatal_22421(msg_22418);
	framePtr = F.prev;

	
}

function failedAssertImpl_22439(msg_22441) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3613;
		raiseAssert_22416(msg_22441);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_14476 = null;
		e_14476 = {m_type: NTI3458, parent: null, name: null, message: null, trace: null, up: null};
		e_14476.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14476.parent = null;
		raiseException(e_14476, "RangeError");

	
}

function initTable_60346(initialSize_60351) {
	var result_60353 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(isPowerOfTwo_32627(initialSize_60351))) {
		F.line = 323;
		failedAssertImpl_22439(makeNimstrLit("isPowerOfTwo(initialSize) "));
		}
		
		F.line = 324;
		result_60353.counter = 0;
		F.line = 325;
		result_60353.data = new Array(chckRange(initialSize_60351, 0, 2147483647)); for (var i=0;i<chckRange(initialSize_60351, 0, 2147483647);++i) {result_60353.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_60353;

}

function newTable_60282(initialSize_60287) {
	var result_60289 = null;

	var F={procname:"newTable.newTable",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 447;
		result_60289 = {data: null, counter: 0};
		F.line = 448;
		nimCopy(result_60289, initTable_60346(initialSize_60287), NTI52715);
	framePtr = F.prev;

	return result_60289;

}

function initRuntime_60273() {
	var result_60275 = null;

	var F={procname:"nl_runtime.initRuntime",prev:framePtr,filename:"nutslisppkg/nl_runtime.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 20;
		var rt_60276 = {m_type: NTI52705, readtable: null, packageTable: null, currentPackage: null};
		F.line = 21;
		rt_60276.packageTable = newTable_60282(64);
		F.line = 22;
		result_60275 = rt_60276;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_60275;

}

function raiseOverflow() {
		var e_14440 = null;
		e_14440 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null, up: null};
		e_14440.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14440.parent = null;
		raiseException(e_14440, "OverflowError");

	
}

function makeLispObject_56008() {
	var result_56011 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_56012 = {m_type: NTI52534, parent: null, binding: null, id: 0};
		F.line = 20;
		lispObj_56012.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_56011 = lispObj_56012;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_56011;

}

function initTable_56108(initialSize_56113) {
	var result_56115 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(isPowerOfTwo_32627(initialSize_56113))) {
		F.line = 323;
		failedAssertImpl_22439(makeNimstrLit("isPowerOfTwo(initialSize) "));
		}
		
		F.line = 324;
		result_56115.counter = 0;
		F.line = 325;
		result_56115.data = new Array(chckRange(initialSize_56113, 0, 2147483647)); for (var i=0;i<chckRange(initialSize_56113, 0, 2147483647);++i) {result_56115.data[i]={Field0: 0, Field1: 0, Field2: null};}	framePtr = F.prev;

	return result_56115;

}

function newTable_60086(initialSize_60091) {
	var result_60093 = null;

	var F={procname:"newTable.newTable",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 447;
		result_60093 = {data: null, counter: 0};
		F.line = 448;
		nimCopy(result_60093, initTable_56108(initialSize_60091), NTI52544);
	framePtr = F.prev;

	return result_60093;

}

function initEnvironment_56003() {
	var result_56005 = null;

	var F={procname:"nl_runtime.initEnvironment",prev:framePtr,filename:"nutslisppkg/nl_runtime.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 7;
		var env_56023 = makeLispObject_56008();
		F.line = 8;
		env_56023.binding = newTable_60086(64);
		F.line = 9;
		result_56005 = env_56023;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_56005;

}

function initPackage_60265(name_60267, nicknames_60269) {
	var result_60270 = null;

	var F={procname:"nl_runtime.initPackage",prev:framePtr,filename:"nutslisppkg/nl_runtime.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 13;
		var pkg_60271 = {m_type: NTI52528, name: null, nicknames: null, environment: null, id: 0};
		F.line = 14;
		pkg_60271.name = nimCopy(null, name_60267, NTI138);
		F.line = 15;
		pkg_60271.nicknames = nimCopy(null, nicknames_60269, NTI60268);
		F.line = 16;
		pkg_60271.environment = initEnvironment_56003();
		F.line = 17;
		result_60270 = pkg_60271;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_60270;

}

function isFilled_48465(hcode_48467) {
	var result_48468 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_48468 = !((hcode_48467 == 0));
	framePtr = F.prev;

	return result_48468;

}

function raiseIndexError() {
		var e_14494 = null;
		e_14494 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null, up: null};
		e_14494.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14494.parent = null;
		raiseException(e_14494, "IndexError");

	
}

function makeLispObject_65890() {
	var result_65893 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_65894 = {m_type: NTI52474, name: null, value: null, function: null, package: null, plist: null, id: 0};
		F.line = 20;
		lispObj_65894.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_65893 = lispObj_65894;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65893;

}

function hash_56415(x_56419) {
	var result_56420 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_56420 = x_56419;
	framePtr = F.prev;

	return result_56420;

}

function nextTry_48601(h_48603, maxHash_48604) {
	var result_48605 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_48605 = (addInt(h_48603, 1) & maxHash_48604);
	framePtr = F.prev;

	return result_48605;

}

function rawGet_56403(t_56408, key_56410, hc_56412, hc_56412_Idx) {
						var Tmp3;

	var result_56413 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_56412[hc_56412_Idx] = hash_56415(key_56410);
		if ((hc_56412[hc_56412_Idx] == 0)) {
		F.line = 45;
		hc_56412[hc_56412_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_56437 = (hc_56412[hc_56412_Idx] & (t_56408.data != null ? (t_56408.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_48465(t_56408.data[chckIndx(h_56437, 0, t_56408.data.length-1)-0].Field0)) break L2;
						if (!(t_56408.data[chckIndx(h_56437, 0, t_56408.data.length-1)-0].Field0 == hc_56412[hc_56412_Idx])) Tmp3 = false; else {							Tmp3 = (t_56408.data[chckIndx(h_56437, 0, t_56408.data.length-1)-0].Field1 == key_56410);						}					if (Tmp3) {
					F.line = 38;
					result_56413 = h_56437;
					break BeforeRet;
					}
					
					F.line = 39;
					h_56437 = nextTry_48601(h_56437, (t_56408.data != null ? (t_56408.data.length-1) : -1));
				}
		} while(false);
		F.line = 75;
		result_56413 = subInt(-1, h_56437);
	} while (false);
	framePtr = F.prev;

	return result_56413;

}

function mustRehash_48470(length_48472, counter_48473) {
	var result_48474 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_48473 < length_48472))) {
		F.line = 24;
		failedAssertImpl_22439(makeNimstrLit("\x0A  counter < length "));
		}
		
		F.line = 25;
		result_48474 = ((mulInt(length_48472, 2) < mulInt(counter_48473, 3)) || (subInt(length_48472, counter_48473) < 4));
	framePtr = F.prev;

	return result_48474;

}

function rawInsert_58593(t_58600, data_58604, data_58604_Idx, key_58606, val_58608, hc_58610, h_58612) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_58604[data_58604_Idx][chckIndx(h_58612, 0, data_58604[data_58604_Idx].length-1)-0].Field1 = key_58606;
		F.line = 65;
		data_58604[data_58604_Idx][chckIndx(h_58612, 0, data_58604[data_58604_Idx].length-1)-0].Field2 = val_58608;
		F.line = 79;
		data_58604[data_58604_Idx][chckIndx(h_58612, 0, data_58604[data_58604_Idx].length-1)-0].Field0 = hc_58610;
	framePtr = F.prev;

	
}

function enlarge_57490(t_57497) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 285;
		var n_57501 = null;
		F.line = 286;
		n_57501 = new Array(chckRange(mulInt((t_57497.data != null ? t_57497.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_57497.data != null ? t_57497.data.length : 0), 2), 0, 2147483647);++i) {n_57501[i]={Field0: 0, Field1: 0, Field2: null};}		F.line = 287;
		var Tmp1 = t_57497.data; t_57497.data = n_57501; n_57501 = Tmp1;		L2: do {
			F.line = 288;
			var i_57707 = 0;
			F.line = 1967;
			var colontmp__59257 = 0;
			F.line = 288;
			colontmp__59257 = (n_57501 != null ? (n_57501.length-1) : -1);
			F.line = 1973;
			var res_59260 = 0;
			L3: do {
				F.line = 1974;
					L4: while (true) {
					if (!(res_59260 <= colontmp__59257)) break L4;
						F.line = 1975;
						i_57707 = res_59260;
						F.line = 289;
						var eh_57921 = n_57501[chckIndx(i_57707, 0, n_57501.length-1)-0].Field0;
						if (isFilled_48465(eh_57921)) {
						F.line = 291;
						var j_57930 = (eh_57921 & (t_57497.data != null ? (t_57497.data.length-1) : -1));
						L5: do {
							F.line = 292;
								L6: while (true) {
								if (!isFilled_48465(t_57497.data[chckIndx(j_57930, 0, t_57497.data.length-1)-0].Field0)) break L6;
									F.line = 293;
									j_57930 = nextTry_48601(j_57930, (t_57497.data != null ? (t_57497.data.length-1) : -1));
								}
						} while(false);
						F.line = 294;
						rawInsert_58593(t_57497, t_57497, "data", n_57501[chckIndx(i_57707, 0, n_57501.length-1)-0].Field1, n_57501[chckIndx(i_57707, 0, n_57501.length-1)-0].Field2, eh_57921, j_57930);
						}
						
						F.line = 1976;
						res_59260 = addInt(res_59260, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function rawGetKnownHC_59265(t_59270, key_59272, hc_59274) {
	var result_59275 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_59284 = (hc_59274 & (t_59270.data != null ? (t_59270.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_48465(t_59270.data[chckIndx(h_59284, 0, t_59270.data.length-1)-0].Field0)) break L2;
					if (((t_59270.data[chckIndx(h_59284, 0, t_59270.data.length-1)-0].Field0 == hc_59274) && (t_59270.data[chckIndx(h_59284, 0, t_59270.data.length-1)-0].Field1 == key_59272))) {
					F.line = 38;
					result_59275 = h_59284;
					break BeforeRet;
					}
					
					F.line = 39;
					h_59284 = nextTry_48601(h_59284, (t_59270.data != null ? (t_59270.data.length-1) : -1));
				}
		} while(false);
		F.line = 69;
		result_59275 = subInt(-1, h_59284);
	} while (false);
	framePtr = F.prev;

	return result_59275;

}

function X5BX5Deq__56389(t_56396, key_56398, val_56400) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_56401 = [0];
		F.line = 98;
		var index_57088 = rawGet_56403(t_56396, key_56398, hc_56401, 0);
		if ((0 <= index_57088)) {
		F.line = 99;
		t_56396.data[chckIndx(index_57088, 0, t_56396.data.length-1)-0].Field2 = val_56400;
		}
		else {
			if (mustRehash_48470((t_56396.data != null ? t_56396.data.length : 0), t_56396.counter)) {
			F.line = 90;
			enlarge_57490(t_56396);
			F.line = 91;
			index_57088 = rawGetKnownHC_59265(t_56396, key_56398, hc_56401[0]);
			}
			
			F.line = 92;
			index_57088 = subInt(-1, index_57088);
			F.line = 93;
			rawInsert_58593(t_56396, t_56396, "data", key_56398, val_56400, hc_56401[0], index_57088);
			F.line = 100;
			t_56396.counter = addInt(t_56396.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function X5BX5Deq__66052(t_66058, key_66060, val_66062) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 429;
		X5BX5Deq__56389(t_66058, key_66060, val_66062);
	framePtr = F.prev;

	
}

function intern_65420(name_65422, package_65423) {
	var result_65425 = {Field0: null, Field1: null};

	var F={procname:"nl_runtime.intern",prev:framePtr,filename:"nutslisppkg/nl_runtime.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 36;
			var v_65886 = null;
			F.line = 390;
			var colontmp__66437 = null;
			F.line = 36;
			colontmp__66437 = package_65423.environment.binding;
			L2: do {
				F.line = 392;
				var h_66441 = 0;
				F.line = 1983;
				var colontmp__66443 = 0;
				F.line = 392;
				colontmp__66443 = (colontmp__66437.data != null ? (colontmp__66437.data.length-1) : -1);
				F.line = 1986;
				var res_66445 = 0;
				L3: do {
					F.line = 1987;
						L4: while (true) {
						if (!(res_66445 <= colontmp__66443)) break L4;
							F.line = 1988;
							h_66441 = res_66445;
							if (isFilled_48465(colontmp__66437.data[chckIndx(h_66441, 0, colontmp__66437.data.length-1)-0].Field0)) {
							F.line = 393;
							v_65886 = colontmp__66437.data[chckIndx(h_66441, 0, colontmp__66437.data.length-1)-0].Field2;
							if (eqStrings(v_65886.name, name_65422)) {
							F.line = 38;
							nimCopy(result_65425, {Field0: v_65886, Field1: makeNimstrLit("existed")}, NTI65424);
							break BeforeRet;
							}
							
							}
							
							F.line = 1989;
							res_66445 = addInt(res_66445, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 40;
		var s_65905 = makeLispObject_65890();
		F.line = 41;
		s_65905.name = nimCopy(null, name_65422, NTI138);
		F.line = 42;
		s_65905.package = package_65423;
		F.line = 43;
		X5BX5Deq__66052(package_65423.environment.binding, s_65905.id, s_65905);
		F.line = 44;
		nimCopy(result_65425, {Field0: s_65905, Field1: makeNimstrLit("created")}, NTI65424);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65425;

}

function makeLispObject_77102() {
	var result_77105 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_77106 = {m_type: NTI52518, lambdaList: null, nativeP: false, body: null, nativeBody: null, id: 0};
		F.line = 20;
		lispObj_77106.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_77105 = lispObj_77106;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_77105;

}

function eq_76061(obj1_76063, obj2_76064) {
	var result_76065 = false;

	var F={procname:"nl_pure.eq",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((isObj(obj1_76063.m_type, NTI52481) && isObj(obj2_76064.m_type, NTI52481))) {
		F.line = 35;
		var o1_76088 = obj1_76063;
		F.line = 35;
		var o2_76089 = obj2_76064;
		F.line = 35;
		result_76065 = true;
		break BeforeRet;
		}
		else {
			F.line = 38;
			result_76065 = (obj1_76063.id == obj2_76064.id);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_76065;

}

function makeLispObject_69265() {
	var result_69268 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_69269 = {m_type: NTI52205, id: 0};
		F.line = 20;
		lispObj_69269.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_69268 = lispObj_69269;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_69268;

}

function makeLispObject_68912() {
	var result_68915 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_68916 = {m_type: NTI52481, car: null, cdr: null, id: 0};
		F.line = 20;
		lispObj_68916.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_68915 = lispObj_68916;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68915;

}

function nl_eq_76092(rt_76094, args_76095) {
	var result_76096 = null;

	var F={procname:"nl_pure.nl_eq",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		var a_76097 = args_76095.car;
		F.line = 44;
		var b_76098 = args_76095.cdr.car;
		if (eq_76061(a_76097, b_76098)) {
		F.line = 47;
		result_76096 = makeLispObject_69265();
		break BeforeRet;
		}
		else {
			F.line = 49;
			result_76096 = makeLispObject_68912();
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_76096;

}

function atom_76109(obj_76111) {
	var result_76112 = false;

	var F={procname:"nl_pure.atom",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (isObj(obj_76111.m_type, NTI52468)) {
		F.line = 53;
		result_76112 = false;
		break BeforeRet;
		}
		else {
		if (isObj(obj_76111.m_type, NTI52481)) {
		F.line = 55;
		result_76112 = false;
		break BeforeRet;
		}
		else {
			F.line = 57;
			result_76112 = true;
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_76112;

}

function nl_atom_76137(rt_76139, args_76140) {
	var result_76141 = null;

	var F={procname:"nl_pure.nl_atom",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 60;
		var a_76142 = args_76140.car;
		if (atom_76109(a_76142)) {
		F.line = 63;
		result_76141 = makeLispObject_69265();
		break BeforeRet;
		}
		else {
			F.line = 65;
			result_76141 = makeLispObject_68912();
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_76141;

}

function car_76153(cons_76155) {
	var result_76156 = null;

	var F={procname:"nl_pure.car",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 68;
		result_76156 = cons_76155.car;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76156;

}

function nl_car_76157(rt_76159, args_76160) {
	var result_76161 = null;

	var F={procname:"nl_pure.nl_car",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 71;
		var a_76162 = args_76160.car;
		F.line = 72;
		result_76161 = car_76153(a_76162);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76161;

}

function cdr_76163(cons_76165) {
	var result_76166 = null;

	var F={procname:"nl_pure.cdr",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		result_76166 = cons_76165.cdr;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76166;

}

function nl_cdr_76167(rt_76169, args_76170) {
	var result_76171 = null;

	var F={procname:"nl_pure.nl_cdr",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 78;
		var a_76172 = args_76170.car;
		F.line = 79;
		result_76171 = cdr_76163(a_76172);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76171;

}

function makeLispObject_76180() {
	var result_76183 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_76184 = {m_type: NTI52468, car: null, cdr: null, id: 0};
		F.line = 20;
		lispObj_76184.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_76183 = lispObj_76184;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76183;

}

function cons_76173(obj1_76175, obj2_76176) {
	var result_76177 = null;

	var F={procname:"nl_pure.cons",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 82;
		var cons_76195 = makeLispObject_76180();
		F.line = 83;
		cons_76195.car = obj1_76175;
		F.line = 84;
		cons_76195.cdr = obj2_76176;
		F.line = 85;
		result_76177 = cons_76195;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76177;

}

function nl_cons_76196(rt_76198, args_76199) {
	var result_76200 = null;

	var F={procname:"nl_pure.nl_cons",prev:framePtr,filename:"nutslisppkg/nl_pure.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 89;
		var a_76201 = args_76199.car;
		F.line = 90;
		var b_76202 = args_76199.cdr.car;
		F.line = 92;
		result_76200 = cons_76173(a_76201, b_76202);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76200;

}

function emarkamp__45009(h_45011, val_45012) {
	var result_45013 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 53;
		result_45013 = ((h_45011 + val_45012) >>> 0);
		F.line = 54;
		result_45013 = ((result_45013 + (result_45013 << 10)) >>> 0);
		F.line = 55;
		result_45013 = (result_45013 ^ ((result_45013 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_45013;

}

function emarkdollar__45046(h_45048) {
	var result_45049 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_45049 = ((h_45048 + (h_45048 << 3)) >>> 0);
		F.line = 61;
		result_45049 = (result_45049 ^ ((result_45049 >>> 0) >>> 11));
		F.line = 62;
		result_45049 = ((result_45049 + (result_45049 << 15)) >>> 0);
	framePtr = F.prev;

	return result_45049;

}

function hash_45836(x_45838) {
	var result_45839 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 133;
		var h_45840 = 0;
		L1: do {
			F.line = 134;
			var i_45850 = 0;
			F.line = 1983;
			var colontmp__45860 = 0;
			F.line = 134;
			colontmp__45860 = subInt((x_45838 != null ? x_45838.length-1 : 0), 1);
			F.line = 1986;
			var res_45863 = 0;
			L2: do {
				F.line = 1987;
					L3: while (true) {
					if (!(res_45863 <= colontmp__45860)) break L3;
						F.line = 1988;
						i_45850 = res_45863;
						F.line = 135;
						h_45840 = emarkamp__45009(h_45840, x_45838[chckIndx(i_45850, 0, x_45838.length-1)-0]);
						F.line = 1989;
						res_45863 = addInt(res_45863, 1);
					}
			} while(false);
		} while(false);
		F.line = 136;
		result_45839 = emarkdollar__45046(h_45840);
	framePtr = F.prev;

	return result_45839;

}

function rawGet_60790(t_60795, key_60797, hc_60799, hc_60799_Idx) {
						var Tmp3;

	var result_60800 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_60799[hc_60799_Idx] = hash_45836(key_60797);
		if ((hc_60799[hc_60799_Idx] == 0)) {
		F.line = 45;
		hc_60799[hc_60799_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_60812 = (hc_60799[hc_60799_Idx] & (t_60795.data != null ? (t_60795.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_48465(t_60795.data[chckIndx(h_60812, 0, t_60795.data.length-1)-0].Field0)) break L2;
						if (!(t_60795.data[chckIndx(h_60812, 0, t_60795.data.length-1)-0].Field0 == hc_60799[hc_60799_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_60795.data[chckIndx(h_60812, 0, t_60795.data.length-1)-0].Field1, key_60797);						}					if (Tmp3) {
					F.line = 38;
					result_60800 = h_60812;
					break BeforeRet;
					}
					
					F.line = 39;
					h_60812 = nextTry_48601(h_60812, (t_60795.data != null ? (t_60795.data.length-1) : -1));
				}
		} while(false);
		F.line = 75;
		result_60800 = subInt(-1, h_60812);
	} while (false);
	framePtr = F.prev;

	return result_60800;

}

function rawInsert_62968(t_62975, data_62979, data_62979_Idx, key_62981, val_62983, hc_62985, h_62987) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_62979[data_62979_Idx][chckIndx(h_62987, 0, data_62979[data_62979_Idx].length-1)-0].Field1 = nimCopy(null, key_62981, NTI138);
		F.line = 65;
		data_62979[data_62979_Idx][chckIndx(h_62987, 0, data_62979[data_62979_Idx].length-1)-0].Field2 = val_62983;
		F.line = 79;
		data_62979[data_62979_Idx][chckIndx(h_62987, 0, data_62979[data_62979_Idx].length-1)-0].Field0 = hc_62985;
	framePtr = F.prev;

	
}

function enlarge_61865(t_61872) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 285;
		var n_61876 = null;
		F.line = 286;
		n_61876 = new Array(chckRange(mulInt((t_61872.data != null ? t_61872.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_61872.data != null ? t_61872.data.length : 0), 2), 0, 2147483647);++i) {n_61876[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 287;
		var Tmp1 = t_61872.data; t_61872.data = n_61876; n_61876 = Tmp1;		L2: do {
			F.line = 288;
			var i_62082 = 0;
			F.line = 1967;
			var colontmp__63632 = 0;
			F.line = 288;
			colontmp__63632 = (n_61876 != null ? (n_61876.length-1) : -1);
			F.line = 1973;
			var res_63635 = 0;
			L3: do {
				F.line = 1974;
					L4: while (true) {
					if (!(res_63635 <= colontmp__63632)) break L4;
						F.line = 1975;
						i_62082 = res_63635;
						F.line = 289;
						var eh_62296 = n_61876[chckIndx(i_62082, 0, n_61876.length-1)-0].Field0;
						if (isFilled_48465(eh_62296)) {
						F.line = 291;
						var j_62305 = (eh_62296 & (t_61872.data != null ? (t_61872.data.length-1) : -1));
						L5: do {
							F.line = 292;
								L6: while (true) {
								if (!isFilled_48465(t_61872.data[chckIndx(j_62305, 0, t_61872.data.length-1)-0].Field0)) break L6;
									F.line = 293;
									j_62305 = nextTry_48601(j_62305, (t_61872.data != null ? (t_61872.data.length-1) : -1));
								}
						} while(false);
						F.line = 294;
						rawInsert_62968(t_61872, t_61872, "data", n_61876[chckIndx(i_62082, 0, n_61876.length-1)-0].Field1, n_61876[chckIndx(i_62082, 0, n_61876.length-1)-0].Field2, eh_62296, j_62305);
						}
						
						F.line = 1976;
						res_63635 = addInt(res_63635, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function rawGetKnownHC_63640(t_63645, key_63647, hc_63649) {
	var result_63650 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_63659 = (hc_63649 & (t_63645.data != null ? (t_63645.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_48465(t_63645.data[chckIndx(h_63659, 0, t_63645.data.length-1)-0].Field0)) break L2;
					if (((t_63645.data[chckIndx(h_63659, 0, t_63645.data.length-1)-0].Field0 == hc_63649) && eqStrings(t_63645.data[chckIndx(h_63659, 0, t_63645.data.length-1)-0].Field1, key_63647))) {
					F.line = 38;
					result_63650 = h_63659;
					break BeforeRet;
					}
					
					F.line = 39;
					h_63659 = nextTry_48601(h_63659, (t_63645.data != null ? (t_63645.data.length-1) : -1));
				}
		} while(false);
		F.line = 69;
		result_63650 = subInt(-1, h_63659);
	} while (false);
	framePtr = F.prev;

	return result_63650;

}

function X5BX5Deq__60776(t_60783, key_60785, val_60787) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_60788 = [0];
		F.line = 98;
		var index_61463 = rawGet_60790(t_60783, key_60785, hc_60788, 0);
		if ((0 <= index_61463)) {
		F.line = 99;
		t_60783.data[chckIndx(index_61463, 0, t_60783.data.length-1)-0].Field2 = val_60787;
		}
		else {
			if (mustRehash_48470((t_60783.data != null ? t_60783.data.length : 0), t_60783.counter)) {
			F.line = 90;
			enlarge_61865(t_60783);
			F.line = 91;
			index_61463 = rawGetKnownHC_63640(t_60783, key_60785, hc_60788[0]);
			}
			
			F.line = 92;
			index_61463 = subInt(-1, index_61463);
			F.line = 93;
			rawInsert_62968(t_60783, t_60783, "data", key_60785, val_60787, hc_60788[0], index_61463);
			F.line = 100;
			t_60783.counter = addInt(t_60783.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function X5BX5Deq__80168(t_80174, key_80176, val_80178) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 429;
		X5BX5Deq__60776(t_80174, key_80176, val_80178);
	framePtr = F.prev;

	
}

function initNlCorePackage_80551(rt_80553) {
	var result_80554 = null;

	var F={procname:"bootstrap.initNlCorePackage",prev:framePtr,filename:"nutslisppkg/bootstrap.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 24;
		var pkgName_80555 = makeNimstrLit("nuts-lisp");
		F.line = 25;
		var pkg_80570 = initPackage_60265(pkgName_80555, []);
		F.line = 27;
		rt_80553.currentPackage = pkg_80570;
		F.line = 30;
		var s_80571 = null;
		F.line = 31;
		var fn_80572 = null;
		F.line = 33;
		s_80571 = intern_65420(makeNimstrLit("eq"), rt_80553.currentPackage)["Field0"];
		F.line = 34;
		fn_80572 = makeLispObject_77102();
		F.line = 35;
		fn_80572.lambdaList = null;
		F.line = 36;
		fn_80572.nativeP = true;
		F.line = 37;
		fn_80572.nativeBody = nl_eq_76092;
		F.line = 38;
		s_80571.function = fn_80572;
		F.line = 40;
		s_80571 = intern_65420(makeNimstrLit("atom"), rt_80553.currentPackage)["Field0"];
		F.line = 41;
		fn_80572 = makeLispObject_77102();
		F.line = 42;
		fn_80572.lambdaList = null;
		F.line = 43;
		fn_80572.nativeP = true;
		F.line = 44;
		fn_80572.nativeBody = nl_atom_76137;
		F.line = 45;
		s_80571.function = fn_80572;
		F.line = 47;
		s_80571 = intern_65420(makeNimstrLit("car"), rt_80553.currentPackage)["Field0"];
		F.line = 48;
		fn_80572 = makeLispObject_77102();
		F.line = 49;
		fn_80572.lambdaList = null;
		F.line = 50;
		fn_80572.nativeP = true;
		F.line = 51;
		fn_80572.nativeBody = nl_car_76157;
		F.line = 52;
		s_80571.function = fn_80572;
		F.line = 54;
		s_80571 = intern_65420(makeNimstrLit("cdr"), rt_80553.currentPackage)["Field0"];
		F.line = 55;
		fn_80572 = makeLispObject_77102();
		F.line = 56;
		fn_80572.lambdaList = null;
		F.line = 57;
		fn_80572.nativeP = true;
		F.line = 58;
		fn_80572.nativeBody = nl_cdr_76167;
		F.line = 59;
		s_80571.function = fn_80572;
		F.line = 61;
		s_80571 = intern_65420(makeNimstrLit("cons"), rt_80553.currentPackage)["Field0"];
		F.line = 62;
		fn_80572 = makeLispObject_77102();
		F.line = 63;
		fn_80572.lambdaList = null;
		F.line = 64;
		fn_80572.nativeP = true;
		F.line = 65;
		fn_80572.nativeBody = nl_cons_76196;
		F.line = 66;
		s_80571.function = fn_80572;
		F.line = 68;
		X5BX5Deq__80168(rt_80553.packageTable, pkgName_80555, pkg_80570);
		F.line = 70;
		result_80554 = pkg_80570;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_80554;

}

function initKeywordPackage_80002(rt_80004) {
	var result_80005 = null;

	var F={procname:"bootstrap.initKeywordPackage",prev:framePtr,filename:"nutslisppkg/bootstrap.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		var pkgName_80006 = makeNimstrLit("keyword");
		F.line = 17;
		var pkg_80021 = initPackage_60265(pkgName_80006, []);
		F.line = 19;
		X5BX5Deq__80168(rt_80004.packageTable, pkgName_80006, pkg_80021);
		F.line = 20;
		result_80005 = pkg_80021;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_80005;

}

function initNlRuntime_80757() {
	var result_80759 = null;

	var F={procname:"bootstrap.initNlRuntime",prev:framePtr,filename:"nutslisppkg/bootstrap.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 74;
		var rt_80760 = initRuntime_60273();
		F.line = 75;
		var corePkg_80761 = initNlCorePackage_80551(rt_80760);
		F.line = 77;
		rt_80760.currentPackage = corePkg_80761;
		F.line = 78;
		initKeywordPackage_80002(rt_80760);
		F.line = 80;
		result_80759 = rt_80760;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_80759;

}

function getCurrentPackageName() {
	var result_81204 = null;

	var F={procname:"nutslisp.getCurrentPackageName",prev:framePtr,filename:"nutslisp.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 56;
		result_81204 = toJSStr(rt_81201[0].currentPackage.name);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_81204;

}

function makeLispObject_81406() {
	var result_81409 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_81410 = {m_type: NTI67168, direction: 0, elementType: 0, bufferSize: 0, buffer: null, head: null, tail: null, unreadable: false, id: 0};
		F.line = 20;
		lispObj_81410.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_81409 = lispObj_81410;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_81409;

}

function slash__21607(x_21609, y_21610) {
	var result_21611 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3384;
		result_21611 = (x_21609 / y_21610);
	framePtr = F.prev;

	return result_21611;

}

function newSeq_81474(len_81478) {
	var result_81480 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 709;
		result_81480 = new Array(len_81478); for (var i=0;i<len_81478;++i) {result_81480[i]=null;}	framePtr = F.prev;

	return result_81480;

}

function newSeq_81527(len_81531) {
	var result_81533 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 709;
		result_81533 = new Array(len_81531); for (var i=0;i<len_81531;++i) {result_81533[i]=0;}	framePtr = F.prev;

	return result_81533;

}

function toBuffer_81514(src_81519, bufSize_81521, offset_81523) {
	var result_81525 = null;

	var F={procname:"toBuffer.toBuffer",prev:framePtr,filename:"nutslisppkg/nl_streams.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_81525 = nimCopy(null, newSeq_81527(chckRange(bufSize_81521, 0, 2147483647)), NTI81532);
		F.line = 36;
		var length_81544 = 0;
		if (((bufSize_81521|0) < subInt((src_81519 != null ? src_81519.length : 0), (offset_81523|0)))) {
		F.line = 38;
		length_81544 = bufSize_81521;
		}
		else {
			F.line = 40;
			length_81544 = subInt((src_81519 != null ? src_81519.length : 0), (offset_81523|0));
		}
		
		L1: do {
			F.line = 42;
			var i_81568 = 0;
			F.line = 3832;
			var i_81574 = 0;
			L2: do {
				F.line = 3833;
					L3: while (true) {
					if (!(i_81574 < length_81544)) break L3;
						F.line = 3834;
						i_81568 = i_81574;
						F.line = 43;
						result_81525[chckIndx(i_81568, 0, result_81525.length-1)-0] = src_81519[chckIndx(addInt(offset_81523, i_81568), 0, src_81519.length-1)-0];
						F.line = 3835;
						i_81574 = addInt(i_81574, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81525;

}

function makeAndCopySeq_81431(src_81436, bufSize_81438) {
	var result_81441 = null;

	var F={procname:"makeAndCopySeq.makeAndCopySeq",prev:framePtr,filename:"nutslisppkg/nl_streams.nim",line:0};
	framePtr = F;
		F.line = 47;
		var bufNum_81442 = 0;
		if (((src_81436 != null ? src_81436.length : 0) == 0)) {
		F.line = 49;
		bufNum_81442 = 1;
		}
		else {
		if (((src_81436 != null ? src_81436.length : 0) == (bufSize_81438|0))) {
		F.line = 51;
		bufNum_81442 = (slash__21607((src_81436 != null ? src_81436.length : 0), (bufSize_81438|0)) + 1.0000000000000000e+00);
		}
		else {
			F.line = 53;
			bufNum_81442 = Math.ceil(slash__21607((src_81436 != null ? src_81436.length : 0), (bufSize_81438|0)));
		}
		}
		F.line = 55;
		result_81441 = nimCopy(null, newSeq_81474(chckRange(bufNum_81442, 0, 2147483647)), NTI81479);
		L1: do {
			F.line = 56;
			var i_81512 = 0;
			F.line = 3832;
			var i_81583 = 0;
			L2: do {
				F.line = 3833;
					L3: while (true) {
					if (!(i_81583 < bufNum_81442)) break L3;
						F.line = 3834;
						i_81512 = i_81583;
						F.line = 57;
						result_81441[chckIndx(i_81512, 0, result_81441.length-1)-0] = nimCopy(null, toBuffer_81514(src_81436, bufSize_81438, mulInt(i_81512, bufSize_81438)), NTI81524);
						F.line = 3835;
						i_81583 = addInt(i_81583, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81441;

}

function raiseDivByZero() {
		var e_14458 = null;
		e_14458 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null, up: null};
		e_14458.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14458.parent = null;
		raiseException(e_14458, "DivByZeroError");

	
}

function makeLispStream_81211(elementType_81215, direction_81217, bufSize_81219, str_81222) {
	var result_81224 = null;

	var F={procname:"makeLispStream.makeLispStream",prev:framePtr,filename:"nutslisppkg/nl_streams.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((0 < bufSize_81219))) {
		F.line = 73;
		failedAssertImpl_22439(makeNimstrLit("\x0A  0 < bufSize "));
		}
		
		F.line = 75;
		var stream_81421 = makeLispObject_81406();
		F.line = 76;
		stream_81421.elementType = elementType_81215;
		F.line = 77;
		stream_81421.direction = direction_81217;
		F.line = 78;
		stream_81421.unreadable = false;
		F.line = 79;
		stream_81421.bufferSize = bufSize_81219;
		if ((str_81222 === null)) {
		F.line = 82;
		stream_81421.buffer = nimCopy(null, makeAndCopySeq_81431([], bufSize_81219), NTI81439);
		F.line = 83;
		stream_81421.head = {aidx: 0, bidx: 0};
		F.line = 84;
		stream_81421.tail = {aidx: 0, bidx: 0};
		}
		else {
			F.line = 86;
			stream_81421.buffer = nimCopy(null, makeAndCopySeq_81431(str_81222, bufSize_81219), NTI81439);
			F.line = 87;
			stream_81421.head = {aidx: slash__21607((str_81222 != null ? str_81222.length : 0), (bufSize_81219|0)), bidx: modInt((str_81222 != null ? str_81222.length : 0), (bufSize_81219|0))};
			F.line = 89;
			stream_81421.tail = {aidx: 0, bidx: 0};
		}
		
		F.line = 91;
		result_81224 = stream_81421;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_81224;

}

function isAscii_53001(ch_53003) {
	var result_53004 = false;

	var F={procname:"utf8.isAscii",prev:framePtr,filename:"nutslisppkg/utf8.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 8;
		result_53004 = (ch_53003 < 128);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53004;

}

function isCharseqStart_53013(ch_53015) {
	var result_53016 = false;

	var F={procname:"utf8.isCharseqStart",prev:framePtr,filename:"nutslisppkg/utf8.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 11;
		result_53016 = (192 == (192 & ch_53015));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53016;

}

function charseqLength_53026(ch_53028) {
					var Tmp3;

	var result_53029 = 0;

	var F={procname:"utf8.charseqLength",prev:framePtr,filename:"nutslisppkg/utf8.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		var count_53030 = 0;
		F.line = 16;
		var target_53039 = (240 & ch_53028);
		F.line = 17;
		var bitmask_53041 = 128;
		L1: do {
			F.line = 18;
				L2: while (true) {
					if (!(16 <= bitmask_53041)) Tmp3 = false; else {						Tmp3 = !(((target_53039 & bitmask_53041) == 0));					}				if (!Tmp3) break L2;
					F.line = 19;
					count_53030 = addInt(count_53030, 1);
					F.line = 20;
					target_53039 = (target_53039 << 1);
				}
		} while(false);
		F.line = 21;
		result_53029 = count_53030;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53029;

}

function decodeCharseq_53060(chars_53062) {
	var result_53063 = 0;

	var F={procname:"utf8.decodeCharseq",prev:framePtr,filename:"nutslisppkg/utf8.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 24;
		switch ((chars_53062 != null ? chars_53062.length-1 : 0)) {
		case 1:
			F.line = 26;
			result_53063 = (127 & chars_53062[chckIndx(0, 0, chars_53062.length-1)-0]);
			break BeforeRet;
			break;
		case 2:
			F.line = 28;
			result_53063 = (((15 & chars_53062[chckIndx(0, 0, chars_53062.length-1)-0]) << 6) | (63 & chars_53062[chckIndx(1, 0, chars_53062.length-1)-0]));
			break BeforeRet;
			break;
		case 3:
			F.line = 31;
			result_53063 = ((((15 & chars_53062[chckIndx(0, 0, chars_53062.length-1)-0]) << 12) | ((63 & chars_53062[chckIndx(1, 0, chars_53062.length-1)-0]) << 6)) | (63 & chars_53062[chckIndx(2, 0, chars_53062.length-1)-0]));
			break BeforeRet;
			break;
		case 4:
			F.line = 35;
			result_53063 = (((((7 & chars_53062[chckIndx(0, 0, chars_53062.length-1)-0]) << 18) | ((63 & chars_53062[chckIndx(1, 0, chars_53062.length-1)-0]) << 12)) | ((63 & chars_53062[chckIndx(2, 0, chars_53062.length-1)-0]) << 6)) | (63 & chars_53062[chckIndx(3, 0, chars_53062.length-1)-0]));
			break BeforeRet;
			break;
		default: 
			F.line = 40;
			F.line = 2701;
			var e_53200 = null;
			F.line = 2702;
			e_53200 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_53200.message = nimCopy(null, makeNimstrLit("malformed utf-8 chars"), NTI138);
			F.line = 2704;
			e_53200.parent = null;
			raiseException(e_53200, "Exception");
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_53063;

}

function X5BX5D__21642(s_21644, x_21654) {
	var result_21655 = null;

	var F={procname:"system.[]",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3404;
		result_21655 = nimCopy(null, (s_21644.slice(x_21654.a, (x_21654.b)+1).concat(0)), NTI138);
	framePtr = F.prev;

	return result_21655;

}

function dotdot__40462(a_40466, b_40468) {
	var result_40470 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 305;
		result_40470.a = a_40466;
		F.line = 306;
		result_40470.b = b_40468;
	framePtr = F.prev;

	return result_40470;

}

function invalidFormatString_43795() {
		var e_43803 = null;
		e_43803 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
		e_43803.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_43803.parent = null;
		raiseException(e_43803, "ValueError");

	
}

function nsuToLowerAsciiChar(c_37785) {
	var result_37786 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet4[c_37785] != undefined)) {
		F.line = 210;
		result_37786 = chckRange(addInt(c_37785, 32), 0, 255);
		}
		else {
			F.line = 212;
			result_37786 = c_37785;
		}
		
	framePtr = F.prev;

	return result_37786;

}

function nsuCmpIgnoreStyle(a_38068, b_38069) {
						var Tmp7;

	var result_38070 = 0;

		var i_38071 = 0;
		var j_38072 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_38068[i_38071] == 95)) break L4;
								i_38071 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_38069[j_38072] == 95)) break L6;
								j_38072 += 1;
							}
					} while(false);
					var aa_38091 = nsuToLowerAsciiChar(a_38068[i_38071]);
					var bb_38092 = nsuToLowerAsciiChar(b_38069[j_38072]);
					result_38070 = (aa_38091 - bb_38092);
						if (!((result_38070 == 0))) Tmp7 = true; else {							Tmp7 = (aa_38091 == 0);						}					if (Tmp7) {
					break L1;
					}
					
					i_38071 += 1;
					j_38072 += 1;
				}
		} while(false);

	return result_38070;

}

function findNormalized_43771(x_43773, inArray_43775) {
	var result_43776 = 0;

	BeforeRet: do {
		var i_43777 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_43777 < (inArray_43775 != null ? (inArray_43775.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_43773, inArray_43775[i_43777]) == 0)) {
					result_43776 = i_43777;
					break BeforeRet;
					}
					
					i_43777 += 2;
				}
		} while(false);
		result_43776 = -1;
		break BeforeRet;
	} while (false);

	return result_43776;

}

function nsuAddf(s_43816, s_43816_Idx, formatstr_43817, a_43819) {
						var Tmp5;
							var Tmp8;
							var Tmp11;

		var i_43822 = 0;
		var num_43823 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_43822 < (formatstr_43817 != null ? formatstr_43817.length-1 : 0))) break L2;
					if ((formatstr_43817[i_43822] == 36)) {
					switch (formatstr_43817[(i_43822 + 1)]) {
					case 35:
						if (((a_43819 != null ? (a_43819.length-1) : -1) < num_43823)) {
						invalidFormatString_43795();
						}
						
						if (s_43816[s_43816_Idx] != null) { s_43816[s_43816_Idx] = (s_43816[s_43816_Idx].slice(0, -1)).concat(a_43819[num_43823]); } else { s_43816[s_43816_Idx] = a_43819[num_43823];};
						i_43822 += 2;
						num_43823 += 1;
						break;
					case 36:
						if (s_43816[s_43816_Idx] != null) { addChar(s_43816[s_43816_Idx], 36); } else { s_43816[s_43816_Idx] = [36, 0]; };
						i_43822 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_43866 = 0;
						i_43822 += 1;
						var negative_43876 = (formatstr_43817[i_43822] == 45);
						if (negative_43876) {
						i_43822 += 1;
						}
						
						L3: do {
								L4: while (true) {
								if (!(ConstSet2[formatstr_43817[i_43822]] != undefined)) break L4;
									j_43866 = (((j_43866 * 10) + formatstr_43817[i_43822]) - 48);
									i_43822 += 1;
								}
						} while(false);
						if (!(negative_43876)) {
						Tmp5 = (j_43866 - 1);
						}
						else {
						Tmp5 = ((a_43819 != null ? a_43819.length : 0) - j_43866);
						}
						
						var idx_43924 = Tmp5;
						if (((a_43819 != null ? (a_43819.length-1) : -1) < idx_43924)) {
						invalidFormatString_43795();
						}
						
						if (s_43816[s_43816_Idx] != null) { s_43816[s_43816_Idx] = (s_43816[s_43816_Idx].slice(0, -1)).concat(a_43819[idx_43924]); } else { s_43816[s_43816_Idx] = a_43819[idx_43924];};
						break;
					case 123:
						var j_43940 = (i_43822 + 1);
						L6: do {
								L7: while (true) {
								if (!!((ConstSet3[formatstr_43817[j_43940]] != undefined))) break L7;
									j_43940 += 1;
								}
						} while(false);
						var x_43960 = findNormalized_43771((formatstr_43817.slice((i_43822 + 2), ((j_43940 - 1))+1).concat(0)), a_43819);
							if (!(0 <= x_43960)) Tmp8 = false; else {								Tmp8 = (x_43960 < (a_43819 != null ? (a_43819.length-1) : -1));							}						if (Tmp8) {
						if (s_43816[s_43816_Idx] != null) { s_43816[s_43816_Idx] = (s_43816[s_43816_Idx].slice(0, -1)).concat(a_43819[(x_43960 + 1)]); } else { s_43816[s_43816_Idx] = a_43819[(x_43960 + 1)];};
						}
						else {
						invalidFormatString_43795();
						}
						
						i_43822 = (j_43940 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_43968 = (i_43822 + 1);
						L9: do {
								L10: while (true) {
								if (!(ConstSet5[formatstr_43817[j_43968]] != undefined)) break L10;
									j_43968 += 1;
								}
						} while(false);
						var x_43987 = findNormalized_43771((formatstr_43817.slice((i_43822 + 1), ((j_43968 - 1))+1).concat(0)), a_43819);
							if (!(0 <= x_43987)) Tmp11 = false; else {								Tmp11 = (x_43987 < (a_43819 != null ? (a_43819.length-1) : -1));							}						if (Tmp11) {
						if (s_43816[s_43816_Idx] != null) { s_43816[s_43816_Idx] = (s_43816[s_43816_Idx].slice(0, -1)).concat(a_43819[(x_43987 + 1)]); } else { s_43816[s_43816_Idx] = a_43819[(x_43987 + 1)];};
						}
						else {
						invalidFormatString_43795();
						}
						
						i_43822 = j_43968;
						break;
					default: 
						invalidFormatString_43795();
						break;
					}
					}
					else {
						if (s_43816[s_43816_Idx] != null) { addChar(s_43816[s_43816_Idx], formatstr_43817[i_43822]); } else { s_43816[s_43816_Idx] = [formatstr_43817[i_43822], 0]; };
						i_43822 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatVarargs(formatstr_44039, a_44041) {
	var result_44042 = [null];

		result_44042[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_44042, 0, formatstr_44039, a_44041);

	return result_44042[0];

}

function write_55002(obj_55004) {

		function write_list_55626(obj_55628) {
			var result_55629 = null;

			var F={procname:"write.write_list",prev:framePtr,filename:"nutslisppkg/nl_print.nim",line:0};
			framePtr = F;
			BeforeRet: do {
				if (isObj(obj_55628.m_type, NTI52481)) {
				F.line = 45;
				result_55629 = nimCopy(null, makeNimstrLit(""), NTI138);
				break BeforeRet;
				}
				else {
					F.line = 48;
					var lis_55641 = obj_55628;
					F.line = 49;
					var cdrstr_55642 = write_list_55626(lis_55641.cdr);
					if (((cdrstr_55642 != null ? cdrstr_55642.length-1 : 0) == 0)) {
					F.line = 51;
					result_55629 = nimCopy(null, write_55002(lis_55641.car), NTI138);
					break BeforeRet;
					}
					else {
						F.line = 53;
						result_55629 = nimCopy(null, (write_55002(lis_55641.car).slice(0,-1)).concat(makeNimstrLit(" ").slice(0,-1),cdrstr_55642), NTI138);
						break BeforeRet;
					}
					
				}
				
			} while (false);
			framePtr = F.prev;

			return result_55629;

		}

	var result_55005 = null;

	var F={procname:"nl_print.write",prev:framePtr,filename:"nutslisppkg/nl_print.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(!((obj_55004 === null)))) {
		F.line = 6;
		failedAssertImpl_22439(makeNimstrLit("not isNil(obj) "));
		}
		
		if (isObj(obj_55004.m_type, NTI52481)) {
		F.line = 9;
		result_55005 = nimCopy(null, makeNimstrLit("nil"), NTI138);
		break BeforeRet;
		}
		
		if (isObj(obj_55004.m_type, NTI52490)) {
		F.line = 12;
		var ival_55223 = obj_55004;
		F.line = 13;
		result_55005 = nimCopy(null, cstrToNimstr((ival_55223.value)+""), NTI138);
		break BeforeRet;
		}
		else {
		if (isObj(obj_55004.m_type, NTI52485)) {
		F.line = 16;
		var ch_55235 = obj_55004;
		F.line = 17;
		result_55005 = nimCopy(null, nimCharToStr(chckRange(ch_55235.codepoint, 0, 255)), NTI138);
		break BeforeRet;
		}
		else {
		if (isObj(obj_55004.m_type, NTI55244)) {
		F.line = 20;
		var vec_55265 = obj_55004;
		F.line = 21;
		var s_55266 = makeNimstrLit("(");
		L1: do {
			F.line = 23;
			var elm_55402 = null;
			F.line = 3637;
			var colontmp__55681 = null;
			F.line = 23;
			colontmp__55681 = vec_55265.content;
			F.line = 3639;
			var i_55684 = 0;
			F.line = 3640;
			var L_55686 = (colontmp__55681 != null ? colontmp__55681.length : 0);
			L2: do {
				F.line = 3641;
					L3: while (true) {
					if (!(i_55684 < L_55686)) break L3;
						F.line = 3642;
						elm_55402 = colontmp__55681[chckIndx(i_55684, 0, colontmp__55681.length-1)-0];
						F.line = 24;
						if (s_55266 != null) { s_55266 = (s_55266.slice(0, -1)).concat(write_55002(elm_55402)); } else { s_55266 = write_55002(elm_55402);};
						F.line = 25;
						if (s_55266 != null) { s_55266 = (s_55266.slice(0, -1)).concat(makeNimstrLit(" ")); } else { s_55266 = makeNimstrLit(" ");};
						F.line = 3643;
						i_55684 = addInt(i_55684, 1);
						if (!(((colontmp__55681 != null ? colontmp__55681.length : 0) == L_55686))) {
						F.line = 3644;
						failedAssertImpl_22439(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 27;
		s_55266[chckIndx(subInt((s_55266 != null ? s_55266.length-1 : 0), 1), 0, s_55266.length-1)-0] = 41;
		}
		else {
		if (isObj(obj_55004.m_type, NTI52513)) {
		F.line = 30;
		var str_55414 = obj_55004;
		F.line = 31;
		var s_55415 = makeNimstrLit("");
		L4: do {
			F.line = 33;
			var ch_55602 = null;
			F.line = 3637;
			var colontmp__55689 = null;
			F.line = 33;
			colontmp__55689 = str_55414.content;
			F.line = 3639;
			var i_55692 = 0;
			F.line = 3640;
			var L_55694 = (colontmp__55689 != null ? colontmp__55689.length : 0);
			L5: do {
				F.line = 3641;
					L6: while (true) {
					if (!(i_55692 < L_55694)) break L6;
						F.line = 3642;
						ch_55602 = colontmp__55689[chckIndx(i_55692, 0, colontmp__55689.length-1)-0];
						F.line = 34;
						if (s_55415 != null) { addChar(s_55415, chckRange(ch_55602.codepoint, 0, 255)); } else { s_55415 = [chckRange(ch_55602.codepoint, 0, 255), 0]; };
						F.line = 3643;
						i_55692 = addInt(i_55692, 1);
						if (!(((colontmp__55689 != null ? colontmp__55689.length : 0) == L_55694))) {
						F.line = 3644;
						failedAssertImpl_22439(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 36;
		result_55005 = nimCopy(null, s_55415, NTI138);
		break BeforeRet;
		}
		else {
		if (isObj(obj_55004.m_type, NTI52474)) {
		F.line = 39;
		var s_55614 = obj_55004;
		F.line = 40;
		result_55005 = nimCopy(null, s_55614.name, NTI138);
		break BeforeRet;
		}
		else {
		if (isObj(obj_55004.m_type, NTI52472)) {
		F.line = 55;
		result_55005 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("($list)"), [makeNimstrLit("list"), write_list_55626(obj_55004)]), NTI138);
		break BeforeRet;
		}
		else {
		if (isObj(obj_55004.m_type, NTI52518)) {
		F.line = 58;
		var fn_55657 = obj_55004;
		if (fn_55657.nativeP) {
		F.line = 61;
		result_55005 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("#<function native $id>"), [makeNimstrLit("id"), cstrToNimstr(((fn_55657.id|0))+"")]), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 63;
			result_55005 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("#<function lisp (lambda $args $body)>"), [makeNimstrLit("args"), write_55002(fn_55657.lambdaList), makeNimstrLit("body"), write_55002(fn_55657.body)]), NTI138);
			break BeforeRet;
		}
		
		}
		else {
		if (isObj(obj_55004.m_type, NTI52468)) {
		F.line = 67;
		var c_55673 = obj_55004;
		F.line = 68;
		result_55005 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("($car . $cdr)"), [makeNimstrLit("car"), write_55002(c_55673.car), makeNimstrLit("cdr"), write_55002(c_55673.cdr)]), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 72;
			result_55005 = nimCopy(null, makeNimstrLit("t"), NTI138);
			break BeforeRet;
		}
		}}}}}}}
	} while (false);
	framePtr = F.prev;

	return result_55005;

}

function hasKey_78979(t_78985, key_78987) {
	var result_78988 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 235;
		var hc_78989 = [0];
		F.line = 236;
		result_78988 = (0 <= rawGet_56403(t_78985, key_78987, hc_78989, 0));
	framePtr = F.prev;

	return result_78988;

}

function hasKey_78610(t_78616, key_78618) {
	var result_78619 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 351;
		result_78619 = hasKey_78979(t_78616, key_78618);
	framePtr = F.prev;

	return result_78619;

}

function X5BX5D__77848(t_77855, key_77857) {
	var result_77859 = [null, 0];
	var result_77859_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 146;
		var hc_77861 = [0];
		F.line = 147;
		var index_77875 = rawGet_56403(t_77855, key_77857, hc_77861, 0);
		if ((0 <= index_77875)) {
		F.line = 148;
		result_77859 = t_77855.data[chckIndx(index_77875, 0, t_77855.data.length-1)-0]; result_77859_Idx = "Field2";
		}
		else {
			F.line = 151;
			F.line = 2701;
			var e_78206 = null;
			F.line = 2702;
			e_78206 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_78206.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(cstrToNimstr(((key_77857|0))+"")), NTI138);
			F.line = 2704;
			e_78206.parent = null;
			raiseException(e_78206, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_77859, result_77859_Idx];

}

function X5BX5D__77410(t_77416, key_77418) {
	var result_77420 = [null, 0];
	var result_77420_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 404;
		var Tmp1 = X5BX5D__77848(t_77416, key_77418); result_77420 = Tmp1[0]; result_77420_Idx = Tmp1[1];
	framePtr = F.prev;

	return [result_77420, result_77420_Idx];

}

function evalSetq_77045(rt_77047, env_77048, pairs_77049) {
	var result_77050 = null;

	var F={procname:"nl_eval.evalSetq",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (isObj(pairs_77049.cdr.m_type, NTI52481)) {
		F.line = 33;
		F.line = 2701;
		var e_77068 = null;
		F.line = 2702;
		e_77068 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2703;
		e_77068.message = nimCopy(null, makeNimstrLit("invalid setq"), NTI138);
		F.line = 2704;
		e_77068.parent = null;
		raiseException(e_77068, "Exception");
		}
		else {
			F.line = 36;
			var rest_77077 = pairs_77049.cdr;
			F.line = 37;
			var sym_77078 = pairs_77049.car;
			F.line = 38;
			var val_77079 = eval_77001(rt_77047, env_77048, rest_77077.car);
			F.line = 40;
			sym_77078.value = val_77079;
			if (isObj(rest_77077.cdr.m_type, NTI52481)) {
			F.line = 42;
			result_77050 = val_77079;
			break BeforeRet;
			}
			else {
				F.line = 44;
				result_77050 = evalSetq_77045(rt_77047, env_77048, rest_77077.cdr);
				break BeforeRet;
			}
			
		}
		
	} while (false);
	framePtr = F.prev;

	return result_77050;

}

function evalIf_77006(rt_77008, env_77009, args_77010) {
	var result_77011 = null;

	var F={procname:"nl_eval.evalIf",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		var pred_77012 = eval_77001(rt_77008, env_77009, args_77010.car);
		F.line = 17;
		var rest_77013 = args_77010.cdr;
		F.line = 18;
		var trueClause_77014 = rest_77013.car;
		F.line = 19;
		var falseCons_77015 = rest_77013.cdr;
		if (isObj(pred_77012.m_type, NTI52481)) {
		if (isObj(falseCons_77015.m_type, NTI52481)) {
		F.line = 23;
		result_77011 = makeLispObject_68912();
		break BeforeRet;
		}
		else {
			F.line = 25;
			result_77011 = eval_77001(rt_77008, env_77009, falseCons_77015.car);
			break BeforeRet;
		}
		
		}
		else {
			F.line = 27;
			result_77011 = eval_77001(rt_77008, env_77009, trueClause_77014);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_77011;

}

function evalLambdaExp_77094(rt_77096, env_77097, args_77098) {
	var result_77099 = null;

	var F={procname:"nl_eval.evalLambdaExp",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 50;
		var fn_77117 = makeLispObject_77102();
		if (isObj(args_77098.car.m_type, NTI52481)) {
		F.line = 52;
		fn_77117.lambdaList = null;
		}
		else {
			F.line = 54;
			fn_77117.lambdaList = args_77098.car;
		}
		
		F.line = 55;
		fn_77117.body = args_77098.cdr;
		F.line = 56;
		result_77099 = fn_77117;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_77099;

}

function makeLispObject_68832() {
	var result_68835 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_68836 = {m_type: NTI52472, car: null, cdr: null, id: 0};
		F.line = 20;
		lispObj_68836.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_68835 = lispObj_68836;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68835;

}

function evalArgs_78290(rt_78292, env_78293, args_78294) {
	var result_78295 = null;

	var F={procname:"nl_eval.evalArgs",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 103;
		var val_78296 = eval_77001(rt_78292, env_78293, args_78294.car);
		F.line = 104;
		var cdr_78297 = args_78294.cdr;
		F.line = 105;
		var cons_78303 = makeLispObject_68832();
		F.line = 107;
		cons_78303.car = val_78296;
		if (isObj(cdr_78297.m_type, NTI52481)) {
		F.line = 109;
		cons_78303.cdr = makeLispObject_68912();
		}
		else {
			F.line = 111;
			cons_78303.cdr = evalArgs_78290(rt_78292, env_78293, cdr_78297);
		}
		
		F.line = 113;
		result_78295 = cons_78303;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78295;

}

function bindLambdaList_77130(rt_77132, env_77133, lambdaList_77134, args_77135, newEnv_77136) {
				var Tmp1;

	var result_77137 = null;

	var F={procname:"nl_eval.bindLambdaList",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 63;
		var new_env_77138 = null;
		if ((new_env_77138 === null)) {
		F.line = 67;
		new_env_77138 = initEnvironment_56003();
		F.line = 68;
		new_env_77138.parent = env_77133;
		}
		else {
			F.line = 70;
			new_env_77138 = new_env_77138;
		}
		
		if (isObj(lambdaList_77134.m_type, NTI52481)) {
		F.line = 73;
		result_77137 = new_env_77138;
		break BeforeRet;
		}
		else {
		if (isObj(lambdaList_77134.cdr.m_type, NTI52481)) {
		F.line = 75;
		result_77137 = new_env_77138;
		break BeforeRet;
		}
		else {
			F.line = 78;
			var lambda_cdr_77168 = lambdaList_77134.cdr;
			F.line = 79;
			var args_cdr_77169 = args_77135.cdr;
			if (!(isObj(lambda_cdr_77168.car.m_type, NTI52474))) {
			F.line = 82;
			F.line = 2701;
			var e_77187 = null;
			F.line = 2702;
			e_77187 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_77187.message = nimCopy(null, makeNimstrLit("invalid lambda list"), NTI138);
			F.line = 2704;
			e_77187.parent = null;
			raiseException(e_77187, "Exception");
			}
			else {
				F.line = 84;
				(Tmp1 = X5BX5D__77410(new_env_77138.binding, lambda_cdr_77168.car.id), Tmp1[0])[Tmp1[1]].value = args_cdr_77169.car;
				F.line = 85;
				result_77137 = bindLambdaList_77130(rt_77132, env_77133, lambda_cdr_77168.cdr, args_cdr_77169.cdr, new_env_77138);
				break BeforeRet;
			}
			
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_77137;

}

function initReprClosure_20953(cl_20956) {
	var F={procname:"system.initReprClosure",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 124;
		cl_20956.recDepth = -1;
		F.line = 125;
		cl_20956.indent = 0;
	framePtr = F.prev;

	
}

function reprInt(x_20803) {
	var result_20804 = null;

	var F={procname:"system.reprInt",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 11;
		result_20804 = nimCopy(null, cstrToNimstr((x_20803)+""), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_20804;

}

function reprChar(x_20840) {
	var result_20841 = null;

	var F={procname:"system.reprChar",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 43;
		result_20841 = nimCopy(null, makeNimstrLit("\'"), NTI138);
		F.line = 44;
		switch (x_20840) {
		case 34:
			F.line = 45;
			if (result_20841 != null) { result_20841 = (result_20841.slice(0, -1)).concat(makeNimstrLit("\\\"")); } else { result_20841 = makeNimstrLit("\\\"");};
			break;
		case 92:
			F.line = 46;
			if (result_20841 != null) { result_20841 = (result_20841.slice(0, -1)).concat(makeNimstrLit("\\\\")); } else { result_20841 = makeNimstrLit("\\\\");};
			break;
		case 127:
		case 128:
		case 129:
		case 130:
		case 131:
		case 132:
		case 133:
		case 134:
		case 135:
		case 136:
		case 137:
		case 138:
		case 139:
		case 140:
		case 141:
		case 142:
		case 143:
		case 144:
		case 145:
		case 146:
		case 147:
		case 148:
		case 149:
		case 150:
		case 151:
		case 152:
		case 153:
		case 154:
		case 155:
		case 156:
		case 157:
		case 158:
		case 159:
		case 160:
		case 161:
		case 162:
		case 163:
		case 164:
		case 165:
		case 166:
		case 167:
		case 168:
		case 169:
		case 170:
		case 171:
		case 172:
		case 173:
		case 174:
		case 175:
		case 176:
		case 177:
		case 178:
		case 179:
		case 180:
		case 181:
		case 182:
		case 183:
		case 184:
		case 185:
		case 186:
		case 187:
		case 188:
		case 189:
		case 190:
		case 191:
		case 192:
		case 193:
		case 194:
		case 195:
		case 196:
		case 197:
		case 198:
		case 199:
		case 200:
		case 201:
		case 202:
		case 203:
		case 204:
		case 205:
		case 206:
		case 207:
		case 208:
		case 209:
		case 210:
		case 211:
		case 212:
		case 213:
		case 214:
		case 215:
		case 216:
		case 217:
		case 218:
		case 219:
		case 220:
		case 221:
		case 222:
		case 223:
		case 224:
		case 225:
		case 226:
		case 227:
		case 228:
		case 229:
		case 230:
		case 231:
		case 232:
		case 233:
		case 234:
		case 235:
		case 236:
		case 237:
		case 238:
		case 239:
		case 240:
		case 241:
		case 242:
		case 243:
		case 244:
		case 245:
		case 246:
		case 247:
		case 248:
		case 249:
		case 250:
		case 251:
		case 252:
		case 253:
		case 254:
		case 255:
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		case 31:
			F.line = 47;
			if (result_20841 != null) { result_20841 = (result_20841.slice(0, -1)).concat((makeNimstrLit("\\").slice(0,-1)).concat(reprInt(x_20840))); } else { result_20841 = (makeNimstrLit("\\").slice(0,-1)).concat(reprInt(x_20840));};
			break;
		default: 
			F.line = 48;
			if (result_20841 != null) { addChar(result_20841, x_20840); } else { result_20841 = [x_20840, 0]; };
			break;
		}
		F.line = 49;
		if (result_20841 != null) { result_20841 = (result_20841.slice(0, -1)).concat(makeNimstrLit("\'")); } else { result_20841 = makeNimstrLit("\'");};
	framePtr = F.prev;

	return result_20841;

}

function reprBool(x_20818) {
	var result_20819 = null;

	var F={procname:"system.reprBool",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		if (x_20818) {
		F.line = 31;
		result_20819 = nimCopy(null, makeNimstrLit("true"), NTI138);
		}
		else {
			F.line = 32;
			result_20819 = nimCopy(null, makeNimstrLit("false"), NTI138);
		}
		
	framePtr = F.prev;

	return result_20819;

}

function reprFloat(x_20807) {
		var Tmp1;

	var result_20808 = null;

	var F={procname:"system.reprFloat",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 15;
		if (eqStrings(cstrToNimstr((x_20807)+""), cstrToNimstr(((x_20807|0))+""))) {
		Tmp1 = (cstrToNimstr((x_20807)+"").slice(0,-1)).concat(makeNimstrLit(".0"));
		}
		else {
		Tmp1 = cstrToNimstr((x_20807)+"");
		}
		
		result_20808 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_20808;

}

function reprStrAux_20849(result_20852, result_20852_Idx, s_20853, len_20854) {
	var F={procname:"system.reprStrAux",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 52;
		if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(makeNimstrLit("\"")); } else { result_20852[result_20852_Idx] = makeNimstrLit("\"");};
		L1: do {
			F.line = 53;
			var i_20871 = 0;
			F.line = 1983;
			var colontmp__20888 = 0;
			F.line = 53;
			colontmp__20888 = len_20854 - 1;
			F.line = 1986;
			var res_20891 = 0;
			L2: do {
				F.line = 1987;
					L3: while (true) {
					if (!(res_20891 <= colontmp__20888)) break L3;
						F.line = 1988;
						i_20871 = res_20891;
						F.line = 54;
						var c_20872 = s_20853[i_20871];
						F.line = 55;
						switch (c_20872) {
						case 34:
							F.line = 56;
							if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(makeNimstrLit("\\\"")); } else { result_20852[result_20852_Idx] = makeNimstrLit("\\\"");};
							break;
						case 92:
							F.line = 57;
							if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(makeNimstrLit("\\\\")); } else { result_20852[result_20852_Idx] = makeNimstrLit("\\\\");};
							break;
						case 10:
							F.line = 58;
							if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(makeNimstrLit("\\10\"\x0A\"")); } else { result_20852[result_20852_Idx] = makeNimstrLit("\\10\"\x0A\"");};
							break;
						case 127:
						case 128:
						case 129:
						case 130:
						case 131:
						case 132:
						case 133:
						case 134:
						case 135:
						case 136:
						case 137:
						case 138:
						case 139:
						case 140:
						case 141:
						case 142:
						case 143:
						case 144:
						case 145:
						case 146:
						case 147:
						case 148:
						case 149:
						case 150:
						case 151:
						case 152:
						case 153:
						case 154:
						case 155:
						case 156:
						case 157:
						case 158:
						case 159:
						case 160:
						case 161:
						case 162:
						case 163:
						case 164:
						case 165:
						case 166:
						case 167:
						case 168:
						case 169:
						case 170:
						case 171:
						case 172:
						case 173:
						case 174:
						case 175:
						case 176:
						case 177:
						case 178:
						case 179:
						case 180:
						case 181:
						case 182:
						case 183:
						case 184:
						case 185:
						case 186:
						case 187:
						case 188:
						case 189:
						case 190:
						case 191:
						case 192:
						case 193:
						case 194:
						case 195:
						case 196:
						case 197:
						case 198:
						case 199:
						case 200:
						case 201:
						case 202:
						case 203:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
						case 209:
						case 210:
						case 211:
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 226:
						case 227:
						case 228:
						case 229:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
						case 236:
						case 237:
						case 238:
						case 239:
						case 240:
						case 241:
						case 242:
						case 243:
						case 244:
						case 245:
						case 246:
						case 247:
						case 248:
						case 249:
						case 250:
						case 251:
						case 252:
						case 253:
						case 254:
						case 255:
						case 0:
						case 1:
						case 2:
						case 3:
						case 4:
						case 5:
						case 6:
						case 7:
						case 8:
						case 9:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
						case 24:
						case 25:
						case 26:
						case 27:
						case 28:
						case 29:
						case 30:
						case 31:
							F.line = 60;
							if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat((makeNimstrLit("\\").slice(0,-1)).concat(reprInt(c_20872))); } else { result_20852[result_20852_Idx] = (makeNimstrLit("\\").slice(0,-1)).concat(reprInt(c_20872));};
							break;
						default: 
							F.line = 62;
							if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(reprInt(c_20872)); } else { result_20852[result_20852_Idx] = reprInt(c_20872);};
							break;
						}
						F.line = 1989;
						res_20891 += 1;
					}
			} while(false);
		} while(false);
		F.line = 63;
		if (result_20852[result_20852_Idx] != null) { result_20852[result_20852_Idx] = (result_20852[result_20852_Idx].slice(0, -1)).concat(makeNimstrLit("\"")); } else { result_20852[result_20852_Idx] = makeNimstrLit("\"");};
	framePtr = F.prev;

	
}

function reprStr(s_20897) {
	var result_20898 = [null];

	var F={procname:"system.reprStr",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 66;
		result_20898[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if ((s_20897 === null)) {
		F.line = 72;
		if (result_20898[0] != null) { result_20898[0] = (result_20898[0].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_20898[0] = makeNimstrLit("nil");};
		}
		else {
			F.line = 74;
		reprStrAux_20849(result_20898, 0, toJSStr(s_20897), (s_20897 != null ? s_20897.length-1 : 0));
		}
		
	framePtr = F.prev;

	return result_20898[0];

}

function isUndefined_20832(x_20836) {
	var result_20837 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_20837 = x_20836 === undefined;
	framePtr = F.prev;

	return result_20837;

}

function reprEnum(e_20828, typ_20829) {
	var result_20830 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		if (!(isUndefined_20832(typ_20829.node.sons[e_20828]))) {
		F.line = 38;
		result_20830 = nimCopy(null, cstrToNimstr(typ_20829.node.sons[e_20828].name), NTI138);
		}
		else {
			F.line = 40;
			result_20830 = nimCopy(null, (cstrToNimstr((e_20828)+"").slice(0,-1)).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_20830;

}

function addSetElem_20901(result_20904, result_20904_Idx, elem_20905, typ_20906) {
	var F={procname:"system.addSetElem",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 78;
		switch (typ_20906.kind) {
		case 14:
			F.line = 79;
			if (result_20904[result_20904_Idx] != null) { result_20904[result_20904_Idx] = (result_20904[result_20904_Idx].slice(0, -1)).concat(reprEnum(elem_20905, typ_20906)); } else { result_20904[result_20904_Idx] = reprEnum(elem_20905, typ_20906);};
			break;
		case 1:
			F.line = 80;
			if (result_20904[result_20904_Idx] != null) { result_20904[result_20904_Idx] = (result_20904[result_20904_Idx].slice(0, -1)).concat(reprBool(elem_20905)); } else { result_20904[result_20904_Idx] = reprBool(elem_20905);};
			break;
		case 2:
			F.line = 81;
			if (result_20904[result_20904_Idx] != null) { result_20904[result_20904_Idx] = (result_20904[result_20904_Idx].slice(0, -1)).concat(reprChar(elem_20905)); } else { result_20904[result_20904_Idx] = reprChar(elem_20905);};
			break;
		case 20:
			F.line = 82;
			addSetElem_20901(result_20904, result_20904_Idx, elem_20905, typ_20906.base);
			break;
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 41:
		case 42:
			F.line = 83;
			if (result_20904[result_20904_Idx] != null) { result_20904[result_20904_Idx] = (result_20904[result_20904_Idx].slice(0, -1)).concat(reprInt(elem_20905)); } else { result_20904[result_20904_Idx] = reprInt(elem_20905);};
			break;
		default: 
			F.line = 85;
			if (result_20904[result_20904_Idx] != null) { result_20904[result_20904_Idx] = (result_20904[result_20904_Idx].slice(0, -1)).concat(makeNimstrLit(" (invalid data!)")); } else { result_20904[result_20904_Idx] = makeNimstrLit(" (invalid data!)");};
			break;
		}
	framePtr = F.prev;

	
}

function reprSetAux_20926(result_20929, result_20929_Idx, s_20930, typ_20931) {
	var F={procname:"system.reprSetAux",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 104;
		if (result_20929[result_20929_Idx] != null) { result_20929[result_20929_Idx] = (result_20929[result_20929_Idx].slice(0, -1)).concat(makeNimstrLit("{")); } else { result_20929[result_20929_Idx] = makeNimstrLit("{");};
		F.line = 105;
		var first_20932 = true;
		L1: do {
			F.line = 106;
			var el_20933 = 0;
			F.line = 91;
			var len_20938 = 0;
			F.line = 92;
			var yieldRes_20940 = 0;
			F.line = 93;
			var i_20942 = 0;
			F.line = 94;
			  var setObjKeys = Object.getOwnPropertyNames(s_20930);
  len_20938 = setObjKeys.length;
  
			L2: do {
				F.line = 98;
					L3: while (true) {
					if (!(i_20942 < len_20938)) break L3;
						F.line = 99;
						yieldRes_20940 = parseInt(setObjKeys[i_20942],10);

						F.line = 100;
						el_20933 = yieldRes_20940;
						if (first_20932) {
						F.line = 108;
						first_20932 = false;
						}
						else {
							F.line = 110;
						if (result_20929[result_20929_Idx] != null) { result_20929[result_20929_Idx] = (result_20929[result_20929_Idx].slice(0, -1)).concat(makeNimstrLit(", ")); } else { result_20929[result_20929_Idx] = makeNimstrLit(", ");};
						}
						
						F.line = 111;
						addSetElem_20901(result_20929, result_20929_Idx, el_20933, typ_20931.base);
						F.line = 101;
						i_20942 += 1;
					}
			} while(false);
		} while(false);
		F.line = 112;
		if (result_20929[result_20929_Idx] != null) { result_20929[result_20929_Idx] = (result_20929[result_20929_Idx].slice(0, -1)).concat(makeNimstrLit("}")); } else { result_20929[result_20929_Idx] = makeNimstrLit("}");};
	framePtr = F.prev;

	
}

function reprSet(e_20945, typ_20946) {
	var result_20947 = [null];

	var F={procname:"system.reprSet",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_20947[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		F.line = 116;
		reprSetAux_20926(result_20947, 0, e_20945, typ_20946);
	framePtr = F.prev;

	return result_20947[0];

}

function reprRecordAux_21042(result_21045, result_21045_Idx, o_21046, o_21046_Idx, typ_21047, cl_21049) {
	var F={procname:"system.reprRecordAux",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 183;
		if (result_21045[result_21045_Idx] != null) { result_21045[result_21045_Idx] = (result_21045[result_21045_Idx].slice(0, -1)).concat(makeNimstrLit("[")); } else { result_21045[result_21045_Idx] = makeNimstrLit("[");};
		F.line = 185;
		var first_21050 = true;
		F.line = 186;
		var val_21051 = o_21046, val_21051_Idx = o_21046_Idx;
		if ((typ_21047.node.len == 0)) {
		F.line = 189;
		var key_21052 = typ_21047.node.name;
		F.line = 190;
		if (result_21045[result_21045_Idx] != null) { result_21045[result_21045_Idx] = (result_21045[result_21045_Idx].slice(0, -1)).concat((cstrToNimstr(key_21052).slice(0,-1)).concat(makeNimstrLit(" = "))); } else { result_21045[result_21045_Idx] = (cstrToNimstr(key_21052).slice(0,-1)).concat(makeNimstrLit(" = "));};
		F.line = 191;
		val_21051 = o_21046[key_21052];

		F.line = 192;
		reprAux_20957(result_21045, result_21045_Idx, val_21051, val_21051_Idx, typ_21047.node.typ, cl_21049);
		}
		else {
			L1: do {
				F.line = 195;
				var i_21069 = 0;
				F.line = 1983;
				var colontmp__21076 = 0;
				F.line = 195;
				colontmp__21076 = typ_21047.node.len - 1;
				F.line = 1986;
				var res_21079 = 0;
				L2: do {
					F.line = 1987;
						L3: while (true) {
						if (!(res_21079 <= colontmp__21076)) break L3;
							F.line = 1988;
							i_21069 = res_21079;
							if (first_21050) {
							F.line = 196;
							first_21050 = false;
							}
							else {
								F.line = 197;
							if (result_21045[result_21045_Idx] != null) { result_21045[result_21045_Idx] = (result_21045[result_21045_Idx].slice(0, -1)).concat(makeNimstrLit(",\x0A")); } else { result_21045[result_21045_Idx] = makeNimstrLit(",\x0A");};
							}
							
							F.line = 199;
							var key_21070 = typ_21047.node.sons[i_21069].name;
							F.line = 200;
							if (result_21045[result_21045_Idx] != null) { result_21045[result_21045_Idx] = (result_21045[result_21045_Idx].slice(0, -1)).concat((cstrToNimstr(key_21070).slice(0,-1)).concat(makeNimstrLit(" = "))); } else { result_21045[result_21045_Idx] = (cstrToNimstr(key_21070).slice(0,-1)).concat(makeNimstrLit(" = "));};
							F.line = 201;
							val_21051 = o_21046[key_21070];

							F.line = 202;
							reprAux_20957(result_21045, result_21045_Idx, val_21051, val_21051_Idx, typ_21047.node.sons[i_21069].typ, cl_21049);
							F.line = 1989;
							res_21079 += 1;
						}
				} while(false);
			} while(false);
		}
		
		F.line = 203;
		if (result_21045[result_21045_Idx] != null) { result_21045[result_21045_Idx] = (result_21045[result_21045_Idx].slice(0, -1)).concat(makeNimstrLit("]")); } else { result_21045[result_21045_Idx] = makeNimstrLit("]");};
	framePtr = F.prev;

	
}

function reprRecord(o_21085, o_21085_Idx, typ_21086, cl_21088) {
	var result_21089 = [null];

	var F={procname:"system.reprRecord",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 206;
		result_21089[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		F.line = 207;
		reprRecordAux_21042(result_21089, 0, o_21085, o_21085_Idx, typ_21086, cl_21088);
	framePtr = F.prev;

	return result_21089[0];

}

function reprArray(a_20967, a_20967_Idx, typ_20968, cl_20970) {
			var Tmp1;
		var Tmp2;

	var result_20971 = [null];

	var F={procname:"system.reprArray",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 131;
		var isNilArrayOrSeq_20972 = false;
		F.line = 133;
		    if (a_20967 == null) { 
      isNilArrayOrSeq_20972 = true;
    } else if (a_20967[0] == null) { 
      isNilArrayOrSeq_20972 = true;
    } else {
      isNilArrayOrSeq_20972 = false;
    };
    
			if (!(typ_20968.kind == 24)) Tmp1 = false; else {				Tmp1 = isNilArrayOrSeq_20972;			}		if (Tmp1) {
		F.line = 143;
		result_20971[0] = nimCopy(null, makeNimstrLit("nil"), NTI138);
		break BeforeRet;
		}
		
		F.line = 146;
		if ((typ_20968.kind == 24)) {
		Tmp2 = makeNimstrLit("@[");
		}
		else {
		Tmp2 = makeNimstrLit("[");
		}
		
		result_20971[0] = nimCopy(null, Tmp2, NTI138);
		F.line = 147;
		var len_20989 = 0;
		F.line = 148;
		var i_20990 = 0;
		F.line = 150;
		len_20989 = a_20967.length;

		F.line = 151;
		var dereffed_20991 = a_20967, dereffed_20991_Idx = a_20967_Idx;
		L3: do {
			F.line = 152;
			var i_21008 = 0;
			F.line = 1983;
			var colontmp__21015 = 0;
			F.line = 152;
			colontmp__21015 = len_20989 - 1;
			F.line = 1986;
			var res_21018 = 0;
			L4: do {
				F.line = 1987;
					L5: while (true) {
					if (!(res_21018 <= colontmp__21015)) break L5;
						F.line = 1988;
						i_21008 = res_21018;
						if ((0 < i_21008)) {
						F.line = 154;
						if (result_20971[0] != null) { result_20971[0] = (result_20971[0].slice(0, -1)).concat(makeNimstrLit(", ")); } else { result_20971[0] = makeNimstrLit(", ");};
						}
						
						F.line = 156;
						    dereffed_20991_Idx = i_21008; 
    dereffed_20991 = a_20967[dereffed_20991_Idx];
    
						F.line = 160;
						reprAux_20957(result_20971, 0, dereffed_20991, dereffed_20991_Idx, typ_20968.base, cl_20970);
						F.line = 1989;
						res_21018 += 1;
					}
			} while(false);
		} while(false);
		F.line = 162;
		if (result_20971[0] != null) { result_20971[0] = (result_20971[0].slice(0, -1)).concat(makeNimstrLit("]")); } else { result_20971[0] = makeNimstrLit("]");};
	} while (false);
	framePtr = F.prev;

	return result_20971[0];

}

function reprPointer(p_20812, p_20812_Idx) {
	var result_20813 = null;

	var F={procname:"system.reprPointer",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 20;
		var tmp_20814 = 0;
		F.line = 21;
		    if (p_20812_Idx == null) {
      tmp_20814 = 0;
    } else {
      tmp_20814 = p_20812_Idx;
    }
  
		F.line = 28;
		result_20813 = nimCopy(null, cstrToNimstr((tmp_20814)+""), NTI138);
	framePtr = F.prev;

	return result_20813;

}

function isPointedToNil_21022(p_21024, p_21024_Idx) {
	var result_21025 = false;

	var F={procname:"system.isPointedToNil",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 165;
		if (p_21024 === null) {result_21025 = true};

	framePtr = F.prev;

	return result_21025;

}

function reprRef_21026(result_21029, result_21029_Idx, p_21030, p_21030_Idx, typ_21031, cl_21033) {
	var F={procname:"system.reprRef",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (isPointedToNil_21022(p_21030, p_21030_Idx)) {
		F.line = 170;
		if (result_21029[result_21029_Idx] != null) { result_21029[result_21029_Idx] = (result_21029[result_21029_Idx].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_21029[result_21029_Idx] = makeNimstrLit("nil");};
		F.line = 171;
		break BeforeRet;
		}
		
		F.line = 172;
		if (result_21029[result_21029_Idx] != null) { result_21029[result_21029_Idx] = (result_21029[result_21029_Idx].slice(0, -1)).concat((makeNimstrLit("ref ").slice(0,-1)).concat(reprPointer(p_21030, p_21030_Idx))); } else { result_21029[result_21029_Idx] = (makeNimstrLit("ref ").slice(0,-1)).concat(reprPointer(p_21030, p_21030_Idx));};
		F.line = 173;
		if (result_21029[result_21029_Idx] != null) { result_21029[result_21029_Idx] = (result_21029[result_21029_Idx].slice(0, -1)).concat(makeNimstrLit(" --> ")); } else { result_21029[result_21029_Idx] = makeNimstrLit(" --> ");};
		if (!((typ_21031.base.kind == 16))) {
		F.line = 175;
		    if (p_21030 != null && p_21030.length > 0) {
      p_21030 = p_21030[p_21030_Idx];
    }
    
		}
		
		F.line = 180;
		reprAux_20957(result_21029, result_21029_Idx, p_21030, p_21030_Idx, typ_21031.base, cl_21033);
	} while (false);
	framePtr = F.prev;

	
}

function reprJSONStringify(p_21093) {
	var result_21094 = null;

	var F={procname:"system.reprJSONStringify",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
		F.line = 213;
		var tmp_21095 = null;
		F.line = 214;
		tmp_21095 = JSON.stringify(p_21093);

		F.line = 215;
		result_21094 = nimCopy(null, cstrToNimstr(tmp_21095), NTI138);
	framePtr = F.prev;

	return result_21094;

}

function reprAux_20957(result_20960, result_20960_Idx, p_20961, p_20961_Idx, typ_20962, cl_20964) {
	var F={procname:"system.reprAux",prev:framePtr,filename:"lib/system/reprjs.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((cl_20964.recDepth == 0)) {
		F.line = 220;
		if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(makeNimstrLit("...")); } else { result_20960[result_20960_Idx] = makeNimstrLit("...");};
		F.line = 221;
		break BeforeRet;
		}
		
		F.line = 222;
		cl_20964.recDepth -= 1;
		F.line = 223;
		switch (typ_20962.kind) {
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
			F.line = 225;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprInt(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprInt(p_20961, p_20961_Idx);};
			break;
		case 2:
			F.line = 227;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprChar(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprChar(p_20961, p_20961_Idx);};
			break;
		case 1:
			F.line = 229;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprBool(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprBool(p_20961, p_20961_Idx);};
			break;
		case 36:
		case 37:
		case 38:
		case 39:
			F.line = 231;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprFloat(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprFloat(p_20961, p_20961_Idx);};
			break;
		case 28:
			F.line = 233;
			var fp_21114 = 0;
			F.line = 234;
			fp_21114 = p_20961;

			if ((fp_21114 === null)) {
			F.line = 236;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_20960[result_20960_Idx] = makeNimstrLit("nil");};
			}
			else {
				F.line = 238;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprStr(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprStr(p_20961, p_20961_Idx);};
			}
			
			break;
		case 29:
			F.line = 240;
			var fp_21115 = null;
			F.line = 241;
			fp_21115 = p_20961;

			if ((fp_21115 === null)) {
			F.line = 243;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_20960[result_20960_Idx] = makeNimstrLit("nil");};
			}
			else {
				F.line = 245;
			reprStrAux_20849(result_20960, result_20960_Idx, fp_21115, (fp_21115 != null ? fp_21115.length : 0));
			}
			
			break;
		case 14:
		case 15:
			F.line = 247;
			var fp_21116 = 0;
			F.line = 248;
			fp_21116 = p_20961;

			F.line = 249;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprEnum(fp_21116, typ_20962)); } else { result_20960[result_20960_Idx] = reprEnum(fp_21116, typ_20962);};
			break;
		case 19:
			F.line = 251;
			var fp_21117 = 0;
			F.line = 252;
			fp_21117 = p_20961;

			F.line = 253;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprSet(fp_21117, typ_20962)); } else { result_20960[result_20960_Idx] = reprSet(fp_21117, typ_20962);};
			break;
		case 20:
			F.line = 254;
			reprAux_20957(result_20960, result_20960_Idx, p_20961, p_20961_Idx, typ_20962.base, cl_20964);
			break;
		case 17:
		case 18:
			F.line = 256;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprRecord(p_20961, p_20961_Idx, typ_20962, cl_20964)); } else { result_20960[result_20960_Idx] = reprRecord(p_20961, p_20961_Idx, typ_20962, cl_20964);};
			break;
		case 16:
		case 4:
		case 24:
			F.line = 258;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprArray(p_20961, p_20961_Idx, typ_20962, cl_20964)); } else { result_20960[result_20960_Idx] = reprArray(p_20961, p_20961_Idx, typ_20962, cl_20964);};
			break;
		case 26:
			F.line = 260;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprPointer(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprPointer(p_20961, p_20961_Idx);};
			break;
		case 21:
		case 22:
			F.line = 262;
			reprRef_21026(result_20960, result_20960_Idx, p_20961, p_20961_Idx, typ_20962, cl_20964);
			break;
		case 25:
			if (isPointedToNil_21022(p_20961, p_20961_Idx)) {
			F.line = 265;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_20960[result_20960_Idx] = makeNimstrLit("nil");};
			}
			else {
				F.line = 267;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat(reprPointer(p_20961, p_20961_Idx)); } else { result_20960[result_20960_Idx] = reprPointer(p_20961, p_20961_Idx);};
			}
			
			break;
		default: 
			F.line = 269;
			if (result_20960[result_20960_Idx] != null) { result_20960[result_20960_Idx] = (result_20960[result_20960_Idx].slice(0, -1)).concat((makeNimstrLit("(invalid data!)").slice(0,-1)).concat(reprJSONStringify(p_20961, p_20961_Idx))); } else { result_20960[result_20960_Idx] = (makeNimstrLit("(invalid data!)").slice(0,-1)).concat(reprJSONStringify(p_20961, p_20961_Idx));};
			break;
		}
		F.line = 270;
		cl_20964.recDepth += 1;
	} while (false);
	framePtr = F.prev;

	
}

function funcall_78321(rt_78323, env_78324, fn_78325, args_78326) {
	var result_78327 = null;

	var F={procname:"nl_eval.funcall",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (fn_78325.nativeP) {
		F.line = 120;
		result_78327 = fn_78325.nativeBody(rt_78323, evalArgs_78290(rt_78323, env_78324, args_78326));
		break BeforeRet;
		}
		else {
			F.line = 123;
			var newEnv_78328 = bindLambdaList_77130(rt_78323, env_78324, fn_78325.lambdaList, args_78326, null);
			F.line = 124;
			rawEcho(reprAny(newEnv_78328, null, NTI52443));
			F.line = 125;
			result_78327 = eval_77001(rt_78323, newEnv_78328, fn_78325.body);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_78327;

}

function eval_77001(rt_77003, env_77004, obj_77005) {
		var Tmp1;

	var result_78342 = null;

	var F={procname:"nl_eval.eval",prev:framePtr,filename:"nutslisppkg/nl_eval.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((obj_77005 === null)) {
		F.line = 131;
		F.line = 2701;
		var e_78356 = null;
		F.line = 2702;
		e_78356 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2703;
		e_78356.message = nimCopy(null, makeNimstrLit("nil!!"), NTI138);
		F.line = 2704;
		e_78356.parent = null;
		raiseException(e_78356, "Exception");
		}
		else {
		if (((((isObj(obj_77005.m_type, NTI52485) || isObj(obj_77005.m_type, NTI52488)) || isObj(obj_77005.m_type, NTI52481)) || isObj(obj_77005.m_type, NTI55244)) || isObj(obj_77005.m_type, NTI52513))) {
		F.line = 139;
		result_78342 = obj_77005;
		break BeforeRet;
		}
		else {
		if (isObj(obj_77005.m_type, NTI52474)) {
		F.line = 142;
		var s_78434 = obj_77005;
		if ((env_77004 === null)) {
		if ((s_78434.value === null)) {
		F.line = 146;
		F.line = 2701;
		var e_78455 = null;
		F.line = 2702;
		e_78455 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2703;
		e_78455.message = nimCopy(null, makeNimstrLit("unbound-variable"), NTI138);
		F.line = 2704;
		e_78455.parent = null;
		raiseException(e_78455, "Exception");
		}
		else {
			F.line = 148;
			result_78342 = s_78434.value;
			break BeforeRet;
		}
		
		}
		else {
		if (hasKey_78610(env_77004.binding, s_78434.id)) {
		F.line = 150;
		result_78342 = (Tmp1 = X5BX5D__77410(env_77004.binding, s_78434.id), Tmp1[0])[Tmp1[1]].value;
		break BeforeRet;
		}
		else {
			F.line = 152;
			F.line = 2701;
			var e_79233 = null;
			F.line = 2702;
			e_79233 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_79233.message = nimCopy(null, makeNimstrLit("unbound-variable"), NTI138);
			F.line = 2704;
			e_79233.parent = null;
			raiseException(e_79233, "Exception");
		}
		}
		}
		else {
		if (isObj(obj_77005.m_type, NTI52472)) {
		F.line = 156;
		var c_79253 = obj_77005;
		F.line = 157;
		var op_79254 = c_79253.car;
		F.line = 158;
		var args_79255 = c_79253.cdr;
		if (eqStrings(op_79254.name, makeNimstrLit("quote"))) {
		F.line = 161;
		result_78342 = args_79255.car;
		break BeforeRet;
		}
		
		if (eqStrings(op_79254.name, makeNimstrLit("function"))) {
		F.line = 164;
		result_78342 = args_79255.car.function;
		break BeforeRet;
		}
		
		if (eqStrings(op_79254.name, makeNimstrLit("setq"))) {
		F.line = 167;
		result_78342 = evalSetq_77045(rt_77003, env_77004, args_79255);
		break BeforeRet;
		}
		
		if (eqStrings(op_79254.name, makeNimstrLit("if"))) {
		F.line = 170;
		result_78342 = evalIf_77006(rt_77003, env_77004, args_79255);
		break BeforeRet;
		}
		
		if (eqStrings(op_79254.name, makeNimstrLit("lambda"))) {
		F.line = 173;
		result_78342 = evalLambdaExp_77094(rt_77003, env_77004, args_79255);
		break BeforeRet;
		}
		else {
			F.line = 176;
			var fn_79256 = op_79254.function;
			F.line = 177;
			result_78342 = funcall_78321(rt_77003, env_77004, fn_79256, args_79255);
			break BeforeRet;
		}
		
		}
		else {
			F.line = 180;
			result_78342 = obj_77005;
			break BeforeRet;
		}
		}}}
	} while (false);
	framePtr = F.prev;

	return result_78342;

}

function nl_readElem_67262(stream_67267, peek_67269) {
			var Tmp1;

	var result_67271 = {Field0: 0, Field1: false};

	var F={procname:"nl_readElem.nl_readElem",prev:framePtr,filename:"nutslisppkg/nl_streams.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((stream_67267 === null)) {
		F.line = 119;
		F.line = 2701;
		var e_67284 = null;
		F.line = 2702;
		e_67284 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2703;
		e_67284.message = nimCopy(null, makeNimstrLit("stream is nil!"), NTI138);
		F.line = 2704;
		e_67284.parent = null;
		raiseException(e_67284, "Exception");
		}
		
		if ((stream_67267.buffer === null)) {
		F.line = 122;
		nimCopy(result_67271, {Field0: 0, Field1: true}, NTI67270);
		break BeforeRet;
		}
		
		if (!((0 <= stream_67267.head.aidx))) {
		F.line = 60;
		failedAssertImpl_22439(makeNimstrLit("\x0A  0 <= stream.head.aidx "));
		}
		
		if (!(((stream_67267.head.aidx|0) < (stream_67267.buffer != null ? stream_67267.buffer.length : 0)))) {
		F.line = 61;
		failedAssertImpl_22439(makeNimstrLit("stream.head.aidx < len(stream.buffer) "));
		}
		
		if (!((0 <= stream_67267.tail.aidx))) {
		F.line = 62;
		failedAssertImpl_22439(makeNimstrLit("\x0A  0 <= stream.tail.aidx "));
		}
		
		if (!(((stream_67267.tail.aidx|0) < (stream_67267.buffer != null ? stream_67267.buffer.length : 0)))) {
		F.line = 63;
		failedAssertImpl_22439(makeNimstrLit("stream.tail.aidx < len(stream.buffer) "));
		}
		
		if (!((0 <= stream_67267.head.bidx))) {
		F.line = 64;
		failedAssertImpl_22439(makeNimstrLit("\x0A  0 <= stream.head.bidx "));
		}
		
		if (!((stream_67267.head.bidx < stream_67267.bufferSize))) {
		F.line = 65;
		failedAssertImpl_22439(makeNimstrLit("stream.head.bidx < stream.bufferSize "));
		}
		
		if (!((0 <= stream_67267.tail.bidx))) {
		F.line = 66;
		failedAssertImpl_22439(makeNimstrLit("\x0A  0 <= stream.tail.bidx "));
		}
		
		if (!((stream_67267.tail.bidx < stream_67267.bufferSize))) {
		F.line = 124;
		failedAssertImpl_22439(makeNimstrLit("stream.tail.bidx < stream.bufferSize "));
		}
		
			if (!(stream_67267.tail.aidx == stream_67267.head.aidx)) Tmp1 = false; else {				Tmp1 = (stream_67267.tail.bidx == stream_67267.head.bidx);			}		if (Tmp1) {
		F.line = 127;
		nimCopy(result_67271, {Field0: 0, Field1: true}, NTI67270);
		break BeforeRet;
		}
		else {
			F.line = 129;
			var elem_68802 = stream_67267.buffer[chckIndx(stream_67267.tail.aidx, 0, stream_67267.buffer.length-1)-0][chckIndx(stream_67267.tail.bidx, 0, stream_67267.buffer[chckIndx(stream_67267.tail.aidx, 0, stream_67267.buffer.length-1)-0].length-1)-0];
			if (!(peek_67269)) {
			if ((stream_67267.bufferSize <= addInt(stream_67267.tail.bidx, 1))) {
			F.line = 133;
			stream_67267.tail.aidx = addInt(stream_67267.tail.aidx, 1);
			F.line = 134;
			stream_67267.tail.bidx = modInt(addInt(stream_67267.tail.bidx, 1), stream_67267.bufferSize);
			}
			else {
				F.line = 137;
			stream_67267.tail.bidx = addInt(stream_67267.tail.bidx, 1);
			}
			
			F.line = 138;
			stream_67267.unreadable = true;
			}
			
			F.line = 139;
			nimCopy(result_67271, {Field0: elem_68802, Field1: false}, NTI67270);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_67271;

}

function find_69158(a_69163, item_69165) {
	var result_69166 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2311;
			var i_69191 = 0;
			F.line = 2078;
			var i_69204 = 0;
			L2: do {
				F.line = 2079;
					L3: while (true) {
					if (!(i_69204 < (a_69163 != null ? a_69163.length : 0))) break L3;
						F.line = 2080;
						i_69191 = a_69163[chckIndx(i_69204, 0, a_69163.length-1)-0];
						if ((i_69191 == item_69165)) {
						F.line = 2312;
						break BeforeRet;
						}
						
						F.line = 2313;
						result_69166 = addInt(result_69166, 1);
						F.line = 2081;
						i_69204 = addInt(i_69204, 1);
					}
			} while(false);
		} while(false);
		F.line = 2314;
		result_69166 = -1;
	} while (false);
	framePtr = F.prev;

	return result_69166;

}

function contains_69148(a_69153, item_69155) {
	var result_69156 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2319;
		result_69156 = (0 <= find_69158(a_69153, item_69155));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_69156;

}

function skip_69648(chs_69652, s_69654) {
	var F={procname:"skip.skip",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
		F.line = 23;
		var cp_69655 = 0;
		F.line = 24;
		var eof_69656 = false;
		L1: do {
			F.line = 26;
				L2: while (true) {
				if (!true) break L2;
					F.line = 27;
					var __69657 = nl_readElem_67262(s_69654, true);
					F.line = 27;
					cp_69655 = __69657["Field0"];
					F.line = 27;
					eof_69656 = __69657["Field1"];
					if (contains_69148(chs_69652, cp_69655)) {
					F.line = 30;
					nl_readElem_67262(s_69654, false);
					}
					else {
						F.line = 33;
						break L1;
					}
					
				}
		} while(false);
	framePtr = F.prev;

	
}

function makeLispObject_69603() {
	var result_69606 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_69607 = {m_type: NTI52490, value: 0, id: 0};
		F.line = 20;
		lispObj_69607.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_69606 = lispObj_69607;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_69606;

}

function rawParseInt_29966(s_29968, b_29970, b_29970_Idx, start_29971) {
	var result_29972 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 213;
		var sign_29973 = -1;
		F.line = 214;
		var i_29974 = start_29971;
		if ((s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0] == 43)) {
		F.line = 215;
		i_29974 = addInt(i_29974, 1);
		}
		else {
		if ((s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0] == 45)) {
		F.line = 217;
		i_29974 = addInt(i_29974, 1);
		F.line = 218;
		sign_29973 = 1;
		}
		}
		if ((ConstSet6[s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0]] != undefined)) {
		F.line = 220;
		b_29970[b_29970_Idx] = 0;
		L1: do {
			F.line = 221;
				L2: while (true) {
				if (!(ConstSet7[s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0]] != undefined)) break L2;
					F.line = 222;
					b_29970[b_29970_Idx] = subInt(mulInt(b_29970[b_29970_Idx], 10), subInt(s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0], 48));
					F.line = 223;
					i_29974 = addInt(i_29974, 1);
					L3: do {
						F.line = 224;
							L4: while (true) {
							if (!(s_29968[chckIndx(i_29974, 0, s_29968.length-1)-0] == 95)) break L4;
								F.line = 224;
								i_29974 = addInt(i_29974, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 225;
		b_29970[b_29970_Idx] = mulInt(b_29970[b_29970_Idx], sign_29973);
		F.line = 226;
		result_29972 = subInt(i_29974, start_29971);
		}
		
	framePtr = F.prev;

	return result_29972;

}

function npuParseBiggestInt(s_30051, number_30053, number_30053_Idx, start_30054) {
	var result_30055 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 234;
		var res_30056 = [0];
		F.line = 237;
		result_30055 = rawParseInt_29966(s_30051, res_30056, 0, start_30054);
		F.line = 238;
		number_30053[number_30053_Idx] = res_30056[0];
	framePtr = F.prev;

	return result_30055;

}

function npuParseInt(s_30061, number_30063, number_30063_Idx, start_30064) {
			var Tmp1;
				var Tmp2;

	var result_30065 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 245;
		var res_30066 = [0];
		F.line = 246;
		result_30065 = npuParseBiggestInt(s_30061, res_30066, 0, start_30064);
			if (!true) Tmp1 = false; else {				if ((res_30066[0] < -2147483648)) Tmp2 = true; else {					Tmp2 = (2147483647 < res_30066[0]);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 249;
		F.line = 2701;
		var e_30093 = null;
		F.line = 2702;
		e_30093 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2703;
		e_30093.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
		F.line = 2704;
		e_30093.parent = null;
		raiseException(e_30093, "OverflowError");
		}
		else {
		if (!((result_30065 == 0))) {
		F.line = 251;
		number_30063[number_30063_Idx] = chckRange(res_30066[0], -2147483648, 2147483647);
		}
		}
	framePtr = F.prev;

	return result_30065;

}

function nsuParseInt(s_39667) {
			var Tmp1;

	var result_39668 = [0];

		var L_39670 = npuParseInt(s_39667, result_39668, 0, 0);
			if (!((L_39670 == (s_39667 != null ? s_39667.length-1 : 0)))) Tmp1 = true; else {				Tmp1 = (L_39670 == 0);			}		if (Tmp1) {
		var e_39677 = null;
		e_39677 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
		e_39677.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_39667), NTI138);
		e_39677.parent = null;
		raiseException(e_39677, "ValueError");
		}
		

	return result_39668[0];

}

function readNumber_69321(rt_69323, s_69326) {
	var result_69327 = null;

	var F={procname:"nl_read.readNumber",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 130;
		var valueStr_69328 = makeNimstrLit("");
		F.line = 131;
		var cp_69329 = 0;
		F.line = 132;
		var eof_69330 = false;
		L1: do {
			F.line = 134;
				L2: while (true) {
				if (!true) break L2;
					F.line = 135;
					var __69331 = nl_readElem_67262(s_69326, true);
					F.line = 135;
					cp_69329 = __69331["Field0"];
					F.line = 135;
					eof_69330 = __69331["Field1"];
					if (contains_69148([48, 49, 50, 51, 52, 53, 54, 55, 56, 57], cp_69329)) {
					F.line = 138;
					nl_readElem_67262(s_69326, false);
					F.line = 139;
					if (valueStr_69328 != null) { addChar(valueStr_69328, chckRange(cp_69329, 0, 255)); } else { valueStr_69328 = [chckRange(cp_69329, 0, 255), 0]; };
					}
					else {
					if (((eof_69330 || contains_69148([32, 9, 13, 10], cp_69329)) || contains_69148([41], cp_69329))) {
					if (contains_69148([32, 9, 13, 10], cp_69329)) {
					F.line = 143;
					nl_readElem_67262(s_69326, false);
					}
					
					if (!((0 < (valueStr_69328 != null ? valueStr_69328.length-1 : 0)))) {
					F.line = 145;
					failedAssertImpl_22439(makeNimstrLit("\x0A  0 < len(valueStr) "));
					}
					
					F.line = 146;
					var v_69618 = makeLispObject_69603();
					F.line = 147;
					v_69618.value = nsuParseInt(valueStr_69328);
					F.line = 148;
					result_69327 = v_69618;
					break BeforeRet;
					}
					else {
						F.line = 151;
						F.line = 2701;
						var e_69625 = null;
						F.line = 2702;
						e_69625 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
						F.line = 2703;
						e_69625.message = nimCopy(null, makeNimstrLit("read error when reading number: invalid integer"), NTI138);
						F.line = 2704;
						e_69625.parent = null;
						raiseException(e_69625, "Exception");
					}
					}
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_69327;

}

function readList_67225(rt_67227, s_67230) {
	var result_67231 = null;

	var F={procname:"nl_read.readList",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 38;
		var cp_67232 = 0;
		F.line = 39;
		var eof_67233 = false;
		F.line = 40;
		var firstP_67234 = true;
		F.line = 41;
		var list_67235 = null;
		F.line = 42;
		var tail_67236 = null;
		L1: do {
			F.line = 44;
				L2: while (true) {
				if (!true) break L2;
					F.line = 45;
					var __67237 = nl_readElem_67262(s_67230, true);
					F.line = 45;
					cp_67232 = __67237["Field0"];
					F.line = 45;
					eof_67233 = __67237["Field1"];
					if (!((cp_67232 == 41))) {
					F.line = 48;
					var cons_68847 = makeLispObject_68832();
					if (firstP_67234) {
					F.line = 50;
					list_67235 = cons_68847;
					F.line = 51;
					firstP_67234 = false;
					}
					else {
						F.line = 53;
						tail_67236.cdr = cons_68847;
					}
					
					F.line = 54;
					tail_67236 = cons_68847;
					}
					
					if (eof_67233) {
					F.line = 57;
					F.line = 2701;
					var e_68854 = null;
					F.line = 2702;
					e_68854 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
					F.line = 2703;
					e_68854.message = nimCopy(null, makeNimstrLit("read error while parsing through in list"), NTI138);
					F.line = 2704;
					e_68854.parent = null;
					raiseException(e_68854, "Exception");
					}
					else {
					if ((cp_67232 == 41)) {
					F.line = 60;
					nl_readElem_67262(s_67230, false);
					if ((list_67235 === null)) {
					F.line = 63;
					result_67231 = makeLispObject_68912();
					break BeforeRet;
					}
					else {
						F.line = 66;
						tail_67236.cdr = makeLispObject_68912();
						F.line = 67;
						result_67231 = list_67235;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 70;
						tail_67236.car = nl_read_67160(rt_67227, s_67230);
					}
					}
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_67231;

}

function makeLispObject_68949() {
	var result_68952 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_68953 = {m_type: NTI52513, content: null, id: 0};
		F.line = 20;
		lispObj_68953.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_68952 = lispObj_68953;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68952;

}

function makeLispObject_69072() {
	var result_69075 = null;

	var F={procname:"makeLispObject.makeLispObject",prev:framePtr,filename:"nutslisppkg/objects.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 19;
		var lispObj_69076 = {m_type: NTI52485, codepoint: 0, id: 0};
		F.line = 20;
		lispObj_69076.id = lispObjectCount_52401[0];
		F.line = 21;
		lispObjectCount_52401[0] = addInt(lispObjectCount_52401[0], 1);
		F.line = 22;
		result_69075 = lispObj_69076;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_69075;

}

function readString_68938(rt_68940, s_68943) {
	var result_68944 = null;

	var F={procname:"nl_read.readString",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		var cp_68945 = 0;
		F.line = 76;
		var eof_68946 = false;
		F.line = 77;
		var str_68964 = makeLispObject_68949();
		F.line = 79;
		str_68964.content = nimCopy(null, [], NTI68979);
		L1: do {
			F.line = 81;
				L2: while (true) {
				if (!true) break L2;
					F.line = 82;
					var __68980 = nl_readElem_67262(s_68943, true);
					F.line = 82;
					cp_68945 = __68980["Field0"];
					F.line = 82;
					eof_68946 = __68980["Field1"];
					if (eof_68946) {
					F.line = 85;
					F.line = 2701;
					var e_69020 = null;
					F.line = 2702;
					e_69020 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
					F.line = 2703;
					e_69020.message = nimCopy(null, makeNimstrLit("read error while parsing through string"), NTI138);
					F.line = 2704;
					e_69020.parent = null;
					raiseException(e_69020, "Exception");
					}
					else {
					if ((cp_68945 == 34)) {
					F.line = 88;
					result_68944 = str_68964;
					break BeforeRet;
					}
					else {
						F.line = 91;
						nl_readElem_67262(s_68943, false);
						F.line = 92;
						var ch_69087 = makeLispObject_69072();
						F.line = 93;
						ch_69087.codepoint = cp_68945;
						F.line = 94;
						if (str_68964.content != null) { str_68964.content.push(ch_69087); } else { str_68964.content = [ch_69087]; };
					}
					}
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_68944;

}

function encodeCodepoint_53292(cp_53294) {
	var result_53295 = null;

	var F={procname:"utf8.encodeCodepoint",prev:framePtr,filename:"nutslisppkg/utf8.nim",line:0};
	framePtr = F;
		F.line = 63;
		result_53295 = nimCopy(null, mnewString(0), NTI138);
		if ((65536 <= cp_53294)) {
		F.line = 66;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((1835008 & cp_53294) ) >>> 18) | 240), 0, 255)); } else { result_53295 = [chckRange(((((1835008 & cp_53294) ) >>> 18) | 240), 0, 255), 0]; };
		F.line = 67;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((258048 & cp_53294) ) >>> 12) | 128), 0, 255)); } else { result_53295 = [chckRange(((((258048 & cp_53294) ) >>> 12) | 128), 0, 255), 0]; };
		F.line = 68;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((4032 & cp_53294) ) >>> 6) | 128), 0, 255)); } else { result_53295 = [chckRange(((((4032 & cp_53294) ) >>> 6) | 128), 0, 255), 0]; };
		F.line = 69;
		if (result_53295 != null) { addChar(result_53295, chckRange((((63 & cp_53294)|0) | 128), 0, 255)); } else { result_53295 = [chckRange((((63 & cp_53294)|0) | 128), 0, 255), 0]; };
		}
		else {
		if ((2048 <= cp_53294)) {
		F.line = 72;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((258048 & cp_53294) ) >>> 12) | 224), 0, 255)); } else { result_53295 = [chckRange(((((258048 & cp_53294) ) >>> 12) | 224), 0, 255), 0]; };
		F.line = 73;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((4032 & cp_53294) ) >>> 6) | 128), 0, 255)); } else { result_53295 = [chckRange(((((4032 & cp_53294) ) >>> 6) | 128), 0, 255), 0]; };
		F.line = 74;
		if (result_53295 != null) { addChar(result_53295, chckRange((((63 & cp_53294)|0) | 128), 0, 255)); } else { result_53295 = [chckRange((((63 & cp_53294)|0) | 128), 0, 255), 0]; };
		}
		else {
		if ((128 <= cp_53294)) {
		F.line = 77;
		if (result_53295 != null) { addChar(result_53295, chckRange(((((4032 & cp_53294) ) >>> 6) | 192), 0, 255)); } else { result_53295 = [chckRange(((((4032 & cp_53294) ) >>> 6) | 192), 0, 255), 0]; };
		F.line = 78;
		if (result_53295 != null) { addChar(result_53295, chckRange((((63 & cp_53294)|0) | 128), 0, 255)); } else { result_53295 = [chckRange((((63 & cp_53294)|0) | 128), 0, 255), 0]; };
		}
		else {
			F.line = 81;
		if (result_53295 != null) { addChar(result_53295, chckRange(cp_53294, 0, 255)); } else { result_53295 = [chckRange(cp_53294, 0, 255), 0]; };
		}
		}}
	framePtr = F.prev;

	return result_53295;

}

function readSymbol_69102(rt_69104, s_69107) {
	var result_69108 = null;

	var F={procname:"nl_read.readSymbol",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 99;
		var name_69109 = makeNimstrLit("");
		F.line = 100;
		var cp_69110 = 0;
		F.line = 101;
		var eof_69111 = false;
		L1: do {
			F.line = 103;
				L2: while (true) {
				if (!true) break L2;
					F.line = 104;
					var __69112 = nl_readElem_67262(s_69107, true);
					F.line = 104;
					cp_69110 = __69112["Field0"];
					F.line = 104;
					eof_69111 = __69112["Field1"];
					if (((eof_69111 || contains_69148([32, 9, 13, 10], cp_69110)) || contains_69148([41], cp_69110))) {
					if (contains_69148([32, 9, 13, 10], cp_69110)) {
					F.line = 108;
					nl_readElem_67262(s_69107, false);
					}
					
					if (((name_69109 != null ? name_69109.length-1 : 0) <= 0)) {
					F.line = 111;
					result_69108 = makeLispObject_68912();
					break BeforeRet;
					}
					else {
						if (eqStrings(name_69109, makeNimstrLit("t"))) {
						F.line = 115;
						result_69108 = makeLispObject_69265();
						break BeforeRet;
						}
						
						if (eqStrings(name_69109, makeNimstrLit("nil"))) {
						F.line = 118;
						result_69108 = makeLispObject_68912();
						break BeforeRet;
						}
						else {
							F.line = 121;
							result_69108 = intern_65420(name_69109, rt_69104.currentPackage)["Field0"];
							break BeforeRet;
						}
						
					}
					
					}
					else {
						F.line = 124;
						nl_readElem_67262(s_69107, false);
						F.line = 125;
						if (name_69109 != null) { name_69109 = (name_69109.slice(0, -1)).concat(encodeCodepoint_53292(cp_69110)); } else { name_69109 = encodeCodepoint_53292(cp_69110);};
					}
					
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_69108;

}

function nl_read_67160(rt_67162, s_67187) {
	var result_69644 = null;

	var F={procname:"nl_read.nl_read",prev:framePtr,filename:"nutslisppkg/nl_read.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 156;
		var cp_69645 = 0;
		F.line = 157;
		var eof_69646 = false;
		F.line = 159;
		skip_69648(nl_whitespace_67005, s_67187);
		F.line = 161;
		var __69737 = nl_readElem_67262(s_67187, true);
		F.line = 161;
		cp_69645 = __69737["Field0"];
		F.line = 161;
		eof_69646 = __69737["Field1"];
		if (eof_69646) {
		F.line = 164;
		result_69644 = makeLispObject_68912();
		break BeforeRet;
		}
		else {
		if (contains_69148([48, 49, 50, 51, 52, 53, 54, 55, 56, 57], cp_69645)) {
		F.line = 167;
		result_69644 = readNumber_69321(rt_67162, s_67187);
		break BeforeRet;
		}
		}
		F.line = 169;
		switch (cp_69645) {
		case 40:
			F.line = 171;
			nl_readElem_67262(s_67187, false);
			F.line = 172;
			result_69644 = readList_67225(rt_67162, s_67187);
			break BeforeRet;
			break;
		case 34:
			F.line = 175;
			nl_readElem_67262(s_67187, false);
			F.line = 176;
			result_69644 = readString_68938(rt_67162, s_67187);
			break BeforeRet;
			break;
		default: 
			F.line = 179;
			result_69644 = readSymbol_69102(rt_67162, s_67187);
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_69644;

}

function isNimException_13253() {
		return lastJSError.m_type;

	
}

function getCurrentExceptionMsg_13407() {
	var result_13409 = null;

	BeforeRet: do {
		if (!((lastJSError == null))) {
		if (isNimException_13253()) {
		result_13409 = nimCopy(null, lastJSError.message, NTI138);
		break BeforeRet;
		}
		else {
			var msg_13601 = null;
			        if (lastJSError.message !== undefined) {
          msg_13601 = lastJSError.message;
        }
        
			if (!((msg_13601 === null))) {
			result_13409 = nimCopy(null, cstrToNimstr(msg_13601), NTI138);
			break BeforeRet;
			}
			
		}
		
		}
		
		result_13409 = nimCopy(null, makeNimstrLit(""), NTI138);
		break BeforeRet;
	} while (false);

	return result_13409;

}

function readFromString(str_81207) {
	var result_81208 = null;

	var F={procname:"nutslisp.readFromString",prev:framePtr,filename:"nutslisp.nim",line:0};
	framePtr = F;
		F.line = 59;
		F.line = 479;
		var result_81818 = nimCopy(null, [], NTI81816);
		L1: do {
			F.line = 480;
			var x_81820 = 0;
			F.line = 42;
			var colontmp__81837 = null;
			F.line = 61;
			colontmp__81837 = cstrToNimstr(str_81207);
			F.line = 43;
			var idx_81840 = 0;
			L2: do {
				F.line = 44;
					L3: while (true) {
					if (!(idx_81840 < (colontmp__81837 != null ? colontmp__81837.length-1 : 0))) break L3;
						F.line = 45;
						var ch_81842 = colontmp__81837[chckIndx(idx_81840, 0, colontmp__81837.length-1)-0];
						if (isAscii_53001(ch_81842)) {
						F.line = 47;
						x_81820 = ch_81842;
						F.line = 481;
						var Tmp4 = nimCopy(null, x_81820, NTI52423);
						if (result_81818 != null) { result_81818.push(Tmp4); } else { result_81818 = [Tmp4]; };
						F.line = 48;
						idx_81840 = addInt(idx_81840, 1);
						}
						else {
						if (isCharseqStart_53013(ch_81842)) {
						F.line = 51;
						var seqlen_81844 = charseqLength_53026(ch_81842);
						F.line = 52;
						var codepoint_81846 = decodeCharseq_53060(X5BX5D__21642(colontmp__81837, dotdot__40462(idx_81840, subInt(addInt(idx_81840, seqlen_81844), 1))));
						F.line = 53;
						x_81820 = codepoint_81846;
						F.line = 481;
						var Tmp5 = nimCopy(null, x_81820, NTI52423);
						if (result_81818 != null) { result_81818.push(Tmp5); } else { result_81818 = [Tmp5]; };
						F.line = 54;
						idx_81840 = addInt(idx_81840, seqlen_81844);
						}
						else {
							F.line = 56;
							F.line = 2701;
							var e_81848 = null;
							F.line = 2702;
							e_81848 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
							F.line = 2703;
							e_81848.message = nimCopy(null, makeNimstrLit("invalid utf-8 byte"), NTI138);
							F.line = 2704;
							e_81848.parent = null;
							raiseException(e_81848, "Exception");
						}
						}
					}
			} while(false);
		} while(false);
		var stream_81831 = makeLispStream_81211(0, 0, 256, result_81818);
		F.line = 63;
++excHandler;
		try {
		F.line = 64;
		result_81208 = toJSStr(write_55002(eval_77001(rt_81201[0], rt_81201[0].currentPackage.environment, nl_read_67160(rt_81201[0], stream_81831))));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = F;
		if (lastJSError && (isObj(lastJSError.m_type, NTI3424))) {
		F.line = 68;
		var msg_81832 = getCurrentExceptionMsg_13407();
		F.line = 69;
		result_81208 = toJSStr(nsuFormatVarargs(makeNimstrLit("\x0AGot exception with message \'$msg\'"), [makeNimstrLit("msg"), msg_81832]));
		}
		else {
			reraiseException();
		}
lastJSError = prevJSError;
		} finally {
		framePtr = F;
		}
	framePtr = F.prev;

	return result_81208;

}
var rt_81201 = [initNlRuntime_80757()];
